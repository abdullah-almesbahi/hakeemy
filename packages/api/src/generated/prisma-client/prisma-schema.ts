// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AboutUs {
  id: Int!
  arabicContent: String!
  englishContent: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AboutUsConnection {
  pageInfo: PageInfo!
  edges: [AboutUsEdge]!
  aggregate: AggregateAboutUs!
}

input AboutUsCreateInput {
  id: Int
  arabicContent: String!
  englishContent: String!
}

type AboutUsEdge {
  node: AboutUs!
  cursor: String!
}

enum AboutUsOrderByInput {
  id_ASC
  id_DESC
  arabicContent_ASC
  arabicContent_DESC
  englishContent_ASC
  englishContent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AboutUsPreviousValues {
  id: Int!
  arabicContent: String!
  englishContent: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AboutUsSubscriptionPayload {
  mutation: MutationType!
  node: AboutUs
  updatedFields: [String!]
  previousValues: AboutUsPreviousValues
}

input AboutUsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AboutUsWhereInput
  AND: [AboutUsSubscriptionWhereInput!]
  OR: [AboutUsSubscriptionWhereInput!]
  NOT: [AboutUsSubscriptionWhereInput!]
}

input AboutUsUpdateInput {
  arabicContent: String
  englishContent: String
}

input AboutUsUpdateManyMutationInput {
  arabicContent: String
  englishContent: String
}

input AboutUsWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  arabicContent: String
  arabicContent_not: String
  arabicContent_in: [String!]
  arabicContent_not_in: [String!]
  arabicContent_lt: String
  arabicContent_lte: String
  arabicContent_gt: String
  arabicContent_gte: String
  arabicContent_contains: String
  arabicContent_not_contains: String
  arabicContent_starts_with: String
  arabicContent_not_starts_with: String
  arabicContent_ends_with: String
  arabicContent_not_ends_with: String
  englishContent: String
  englishContent_not: String
  englishContent_in: [String!]
  englishContent_not_in: [String!]
  englishContent_lt: String
  englishContent_lte: String
  englishContent_gt: String
  englishContent_gte: String
  englishContent_contains: String
  englishContent_not_contains: String
  englishContent_starts_with: String
  englishContent_not_starts_with: String
  englishContent_ends_with: String
  englishContent_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AboutUsWhereInput!]
  OR: [AboutUsWhereInput!]
  NOT: [AboutUsWhereInput!]
}

input AboutUsWhereUniqueInput {
  id: Int
}

type Admin {
  id: Int!
  email: String!
  pass: String
  superAdmin: Int!
  user: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  id: Int
  email: String!
  pass: String
  superAdmin: Int
  user: String
}

type AdminEdge {
  node: Admin!
  cursor: String!
}

enum AdminOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  pass_ASC
  pass_DESC
  superAdmin_ASC
  superAdmin_DESC
  user_ASC
  user_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AdminPreviousValues {
  id: Int!
  email: String!
  pass: String
  superAdmin: Int!
  user: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
  AND: [AdminSubscriptionWhereInput!]
  OR: [AdminSubscriptionWhereInput!]
  NOT: [AdminSubscriptionWhereInput!]
}

input AdminUpdateInput {
  email: String
  pass: String
  superAdmin: Int
  user: String
}

input AdminUpdateManyMutationInput {
  email: String
  pass: String
  superAdmin: Int
  user: String
}

input AdminWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  pass: String
  pass_not: String
  pass_in: [String!]
  pass_not_in: [String!]
  pass_lt: String
  pass_lte: String
  pass_gt: String
  pass_gte: String
  pass_contains: String
  pass_not_contains: String
  pass_starts_with: String
  pass_not_starts_with: String
  pass_ends_with: String
  pass_not_ends_with: String
  superAdmin: Int
  superAdmin_not: Int
  superAdmin_in: [Int!]
  superAdmin_not_in: [Int!]
  superAdmin_lt: Int
  superAdmin_lte: Int
  superAdmin_gt: Int
  superAdmin_gte: Int
  user: String
  user_not: String
  user_in: [String!]
  user_not_in: [String!]
  user_lt: String
  user_lte: String
  user_gt: String
  user_gte: String
  user_contains: String
  user_not_contains: String
  user_starts_with: String
  user_not_starts_with: String
  user_ends_with: String
  user_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input AdminWhereUniqueInput {
  id: Int
  email: String
  user: String
}

type AggregateAboutUs {
  count: Int!
}

type AggregateAdmin {
  count: Int!
}

type AggregateAppointment {
  count: Int!
}

type AggregateBlog {
  count: Int!
}

type AggregateBlogComment {
  count: Int!
}

type AggregateBlogPost {
  count: Int!
}

type AggregateCity {
  count: Int!
}

type AggregateContactUs {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDisease {
  count: Int!
}

type AggregateDiseaseCovered {
  count: Int!
}

type AggregateDoctor {
  count: Int!
}

type AggregateDoctorOld {
  count: Int!
}

type AggregateDoctorShedule {
  count: Int!
}

type AggregateDoctorSheduleTime {
  count: Int!
}

type AggregateDoctorsRating {
  count: Int!
}

type AggregateDrShedule {
  count: Int!
}

type AggregateEmailSubscription {
  count: Int!
}

type AggregateFacility {
  count: Int!
}

type AggregateHospital {
  count: Int!
}

type AggregateHospitalFacility {
  count: Int!
}

type AggregateHospitalRating {
  count: Int!
}

type AggregateIllness {
  count: Int!
}

type AggregateInsurance {
  count: Int!
}

type AggregateInsuranceCategory {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateMigration {
  count: Int!
}

type AggregateOffer {
  count: Int!
}

type AggregateOnlineAppointment {
  count: Int!
}

type AggregateOnlineDoctor {
  count: Int!
}

type AggregateOnlineRating {
  count: Int!
}

type AggregateOptTime {
  count: Int!
}

type AggregatePage {
  count: Int!
}

type AggregatePasswordReset {
  count: Int!
}

type AggregatePatient {
  count: Int!
}

type AggregatePostImage {
  count: Int!
}

type AggregateSearchDesign {
  count: Int!
}

type AggregateSheduleTime {
  count: Int!
}

type AggregateSlider {
  count: Int!
}

type AggregateSpeciality {
  count: Int!
}

type AggregateTranslation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideoRequest {
  count: Int!
}

type AggregateVisitor {
  count: Int!
}

type Appointment {
  id: Int!
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  diseaseId: Disease
  doctorArabic: String!
  doctorId: Doctor
  doctorName: String!
  dtId: DoctorSheduleTime
  gender: String!
  hospitalId: Hospital
  isRead: Int!
  optId: OptTime
  patientId: Patient
  phone: String!
  phoneCode: String
  scheduleTimeId: SheduleTime
  status: Int
}

type AppointmentConnection {
  pageInfo: PageInfo!
  edges: [AppointmentEdge]!
  aggregate: AggregateAppointment!
}

input AppointmentCreateInput {
  id: Int
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  diseaseId: DiseaseCreateOneInput
  doctorArabic: String!
  doctorId: DoctorCreateOneInput
  doctorName: String!
  dtId: DoctorSheduleTimeCreateOneInput
  gender: String!
  hospitalId: HospitalCreateOneInput
  isRead: Int
  optId: OptTimeCreateOneInput
  patientId: PatientCreateOneInput
  phone: String!
  phoneCode: String
  scheduleTimeId: SheduleTimeCreateOneInput
  status: Int
}

type AppointmentEdge {
  node: Appointment!
  cursor: String!
}

enum AppointmentOrderByInput {
  id_ASC
  id_DESC
  apointmentDate_ASC
  apointmentDate_DESC
  apointmentFulldate_ASC
  apointmentFulldate_DESC
  apointmentTime_ASC
  apointmentTime_DESC
  doctorArabic_ASC
  doctorArabic_DESC
  doctorName_ASC
  doctorName_DESC
  gender_ASC
  gender_DESC
  isRead_ASC
  isRead_DESC
  phone_ASC
  phone_DESC
  phoneCode_ASC
  phoneCode_DESC
  status_ASC
  status_DESC
}

type AppointmentPreviousValues {
  id: Int!
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  doctorArabic: String!
  doctorName: String!
  gender: String!
  isRead: Int!
  phone: String!
  phoneCode: String
  status: Int
}

type AppointmentSubscriptionPayload {
  mutation: MutationType!
  node: Appointment
  updatedFields: [String!]
  previousValues: AppointmentPreviousValues
}

input AppointmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppointmentWhereInput
  AND: [AppointmentSubscriptionWhereInput!]
  OR: [AppointmentSubscriptionWhereInput!]
  NOT: [AppointmentSubscriptionWhereInput!]
}

input AppointmentUpdateInput {
  apointmentDate: String
  apointmentFulldate: Int
  apointmentTime: String
  diseaseId: DiseaseUpdateOneInput
  doctorArabic: String
  doctorId: DoctorUpdateOneInput
  doctorName: String
  dtId: DoctorSheduleTimeUpdateOneInput
  gender: String
  hospitalId: HospitalUpdateOneInput
  isRead: Int
  optId: OptTimeUpdateOneInput
  patientId: PatientUpdateOneInput
  phone: String
  phoneCode: String
  scheduleTimeId: SheduleTimeUpdateOneInput
  status: Int
}

input AppointmentUpdateManyMutationInput {
  apointmentDate: String
  apointmentFulldate: Int
  apointmentTime: String
  doctorArabic: String
  doctorName: String
  gender: String
  isRead: Int
  phone: String
  phoneCode: String
  status: Int
}

input AppointmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apointmentDate: String
  apointmentDate_not: String
  apointmentDate_in: [String!]
  apointmentDate_not_in: [String!]
  apointmentDate_lt: String
  apointmentDate_lte: String
  apointmentDate_gt: String
  apointmentDate_gte: String
  apointmentDate_contains: String
  apointmentDate_not_contains: String
  apointmentDate_starts_with: String
  apointmentDate_not_starts_with: String
  apointmentDate_ends_with: String
  apointmentDate_not_ends_with: String
  apointmentFulldate: Int
  apointmentFulldate_not: Int
  apointmentFulldate_in: [Int!]
  apointmentFulldate_not_in: [Int!]
  apointmentFulldate_lt: Int
  apointmentFulldate_lte: Int
  apointmentFulldate_gt: Int
  apointmentFulldate_gte: Int
  apointmentTime: String
  apointmentTime_not: String
  apointmentTime_in: [String!]
  apointmentTime_not_in: [String!]
  apointmentTime_lt: String
  apointmentTime_lte: String
  apointmentTime_gt: String
  apointmentTime_gte: String
  apointmentTime_contains: String
  apointmentTime_not_contains: String
  apointmentTime_starts_with: String
  apointmentTime_not_starts_with: String
  apointmentTime_ends_with: String
  apointmentTime_not_ends_with: String
  diseaseId: DiseaseWhereInput
  doctorArabic: String
  doctorArabic_not: String
  doctorArabic_in: [String!]
  doctorArabic_not_in: [String!]
  doctorArabic_lt: String
  doctorArabic_lte: String
  doctorArabic_gt: String
  doctorArabic_gte: String
  doctorArabic_contains: String
  doctorArabic_not_contains: String
  doctorArabic_starts_with: String
  doctorArabic_not_starts_with: String
  doctorArabic_ends_with: String
  doctorArabic_not_ends_with: String
  doctorId: DoctorWhereInput
  doctorName: String
  doctorName_not: String
  doctorName_in: [String!]
  doctorName_not_in: [String!]
  doctorName_lt: String
  doctorName_lte: String
  doctorName_gt: String
  doctorName_gte: String
  doctorName_contains: String
  doctorName_not_contains: String
  doctorName_starts_with: String
  doctorName_not_starts_with: String
  doctorName_ends_with: String
  doctorName_not_ends_with: String
  dtId: DoctorSheduleTimeWhereInput
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  hospitalId: HospitalWhereInput
  isRead: Int
  isRead_not: Int
  isRead_in: [Int!]
  isRead_not_in: [Int!]
  isRead_lt: Int
  isRead_lte: Int
  isRead_gt: Int
  isRead_gte: Int
  optId: OptTimeWhereInput
  patientId: PatientWhereInput
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phoneCode: String
  phoneCode_not: String
  phoneCode_in: [String!]
  phoneCode_not_in: [String!]
  phoneCode_lt: String
  phoneCode_lte: String
  phoneCode_gt: String
  phoneCode_gte: String
  phoneCode_contains: String
  phoneCode_not_contains: String
  phoneCode_starts_with: String
  phoneCode_not_starts_with: String
  phoneCode_ends_with: String
  phoneCode_not_ends_with: String
  scheduleTimeId: SheduleTimeWhereInput
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  AND: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
}

input AppointmentWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Blog {
  id: Int!
  bannerImage: String!
  createdDate: DateTime!
  hospitalId: Hospital
  name: String!
  status: Int!
  updatedAt: DateTime
}

type BlogComment {
  id: Int!
  commentator: Int!
  commentatorName: String!
  comments: String!
  logCreated: DateTime!
  postId: BlogPost
  updatedAt: DateTime
}

type BlogCommentConnection {
  pageInfo: PageInfo!
  edges: [BlogCommentEdge]!
  aggregate: AggregateBlogComment!
}

input BlogCommentCreateInput {
  id: Int
  commentator: Int!
  commentatorName: String!
  comments: String!
  postId: BlogPostCreateOneInput
}

type BlogCommentEdge {
  node: BlogComment!
  cursor: String!
}

enum BlogCommentOrderByInput {
  id_ASC
  id_DESC
  commentator_ASC
  commentator_DESC
  commentatorName_ASC
  commentatorName_DESC
  comments_ASC
  comments_DESC
  logCreated_ASC
  logCreated_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BlogCommentPreviousValues {
  id: Int!
  commentator: Int!
  commentatorName: String!
  comments: String!
  logCreated: DateTime!
  updatedAt: DateTime
}

type BlogCommentSubscriptionPayload {
  mutation: MutationType!
  node: BlogComment
  updatedFields: [String!]
  previousValues: BlogCommentPreviousValues
}

input BlogCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogCommentWhereInput
  AND: [BlogCommentSubscriptionWhereInput!]
  OR: [BlogCommentSubscriptionWhereInput!]
  NOT: [BlogCommentSubscriptionWhereInput!]
}

input BlogCommentUpdateInput {
  commentator: Int
  commentatorName: String
  comments: String
  postId: BlogPostUpdateOneInput
}

input BlogCommentUpdateManyMutationInput {
  commentator: Int
  commentatorName: String
  comments: String
}

input BlogCommentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  commentator: Int
  commentator_not: Int
  commentator_in: [Int!]
  commentator_not_in: [Int!]
  commentator_lt: Int
  commentator_lte: Int
  commentator_gt: Int
  commentator_gte: Int
  commentatorName: String
  commentatorName_not: String
  commentatorName_in: [String!]
  commentatorName_not_in: [String!]
  commentatorName_lt: String
  commentatorName_lte: String
  commentatorName_gt: String
  commentatorName_gte: String
  commentatorName_contains: String
  commentatorName_not_contains: String
  commentatorName_starts_with: String
  commentatorName_not_starts_with: String
  commentatorName_ends_with: String
  commentatorName_not_ends_with: String
  comments: String
  comments_not: String
  comments_in: [String!]
  comments_not_in: [String!]
  comments_lt: String
  comments_lte: String
  comments_gt: String
  comments_gte: String
  comments_contains: String
  comments_not_contains: String
  comments_starts_with: String
  comments_not_starts_with: String
  comments_ends_with: String
  comments_not_ends_with: String
  logCreated: DateTime
  logCreated_not: DateTime
  logCreated_in: [DateTime!]
  logCreated_not_in: [DateTime!]
  logCreated_lt: DateTime
  logCreated_lte: DateTime
  logCreated_gt: DateTime
  logCreated_gte: DateTime
  postId: BlogPostWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BlogCommentWhereInput!]
  OR: [BlogCommentWhereInput!]
  NOT: [BlogCommentWhereInput!]
}

input BlogCommentWhereUniqueInput {
  id: Int
}

type BlogConnection {
  pageInfo: PageInfo!
  edges: [BlogEdge]!
  aggregate: AggregateBlog!
}

input BlogCreateInput {
  id: Int
  bannerImage: String!
  hospitalId: HospitalCreateOneInput
  name: String!
  status: Int
}

input BlogCreateOneInput {
  create: BlogCreateInput
  connect: BlogWhereUniqueInput
}

type BlogEdge {
  node: Blog!
  cursor: String!
}

enum BlogOrderByInput {
  id_ASC
  id_DESC
  bannerImage_ASC
  bannerImage_DESC
  createdDate_ASC
  createdDate_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BlogPost {
  id: Int!
  blogId: Blog
  hospitalId: Hospital
  logCreated: DateTime!
  postContent: String!
  postTitle: String!
  status: Int!
  totalViewers: Int!
  images(where: PostImageWhereInput, orderBy: PostImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostImage!]
  updatedAt: DateTime
}

type BlogPostConnection {
  pageInfo: PageInfo!
  edges: [BlogPostEdge]!
  aggregate: AggregateBlogPost!
}

input BlogPostCreateInput {
  id: Int
  blogId: BlogCreateOneInput
  hospitalId: HospitalCreateOneInput
  postContent: String!
  postTitle: String!
  status: Int
  totalViewers: Int
  images: PostImageCreateManyWithoutPostIdInput
}

input BlogPostCreateOneInput {
  create: BlogPostCreateInput
  connect: BlogPostWhereUniqueInput
}

input BlogPostCreateOneWithoutImagesInput {
  create: BlogPostCreateWithoutImagesInput
  connect: BlogPostWhereUniqueInput
}

input BlogPostCreateWithoutImagesInput {
  id: Int
  blogId: BlogCreateOneInput
  hospitalId: HospitalCreateOneInput
  postContent: String!
  postTitle: String!
  status: Int
  totalViewers: Int
}

type BlogPostEdge {
  node: BlogPost!
  cursor: String!
}

enum BlogPostOrderByInput {
  id_ASC
  id_DESC
  logCreated_ASC
  logCreated_DESC
  postContent_ASC
  postContent_DESC
  postTitle_ASC
  postTitle_DESC
  status_ASC
  status_DESC
  totalViewers_ASC
  totalViewers_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BlogPostPreviousValues {
  id: Int!
  logCreated: DateTime!
  postContent: String!
  postTitle: String!
  status: Int!
  totalViewers: Int!
  updatedAt: DateTime
}

type BlogPostSubscriptionPayload {
  mutation: MutationType!
  node: BlogPost
  updatedFields: [String!]
  previousValues: BlogPostPreviousValues
}

input BlogPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogPostWhereInput
  AND: [BlogPostSubscriptionWhereInput!]
  OR: [BlogPostSubscriptionWhereInput!]
  NOT: [BlogPostSubscriptionWhereInput!]
}

input BlogPostUpdateDataInput {
  blogId: BlogUpdateOneInput
  hospitalId: HospitalUpdateOneInput
  postContent: String
  postTitle: String
  status: Int
  totalViewers: Int
  images: PostImageUpdateManyWithoutPostIdInput
}

input BlogPostUpdateInput {
  blogId: BlogUpdateOneInput
  hospitalId: HospitalUpdateOneInput
  postContent: String
  postTitle: String
  status: Int
  totalViewers: Int
  images: PostImageUpdateManyWithoutPostIdInput
}

input BlogPostUpdateManyMutationInput {
  postContent: String
  postTitle: String
  status: Int
  totalViewers: Int
}

input BlogPostUpdateOneInput {
  create: BlogPostCreateInput
  update: BlogPostUpdateDataInput
  upsert: BlogPostUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BlogPostWhereUniqueInput
}

input BlogPostUpdateOneWithoutImagesInput {
  create: BlogPostCreateWithoutImagesInput
  update: BlogPostUpdateWithoutImagesDataInput
  upsert: BlogPostUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: BlogPostWhereUniqueInput
}

input BlogPostUpdateWithoutImagesDataInput {
  blogId: BlogUpdateOneInput
  hospitalId: HospitalUpdateOneInput
  postContent: String
  postTitle: String
  status: Int
  totalViewers: Int
}

input BlogPostUpsertNestedInput {
  update: BlogPostUpdateDataInput!
  create: BlogPostCreateInput!
}

input BlogPostUpsertWithoutImagesInput {
  update: BlogPostUpdateWithoutImagesDataInput!
  create: BlogPostCreateWithoutImagesInput!
}

input BlogPostWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blogId: BlogWhereInput
  hospitalId: HospitalWhereInput
  logCreated: DateTime
  logCreated_not: DateTime
  logCreated_in: [DateTime!]
  logCreated_not_in: [DateTime!]
  logCreated_lt: DateTime
  logCreated_lte: DateTime
  logCreated_gt: DateTime
  logCreated_gte: DateTime
  postContent: String
  postContent_not: String
  postContent_in: [String!]
  postContent_not_in: [String!]
  postContent_lt: String
  postContent_lte: String
  postContent_gt: String
  postContent_gte: String
  postContent_contains: String
  postContent_not_contains: String
  postContent_starts_with: String
  postContent_not_starts_with: String
  postContent_ends_with: String
  postContent_not_ends_with: String
  postTitle: String
  postTitle_not: String
  postTitle_in: [String!]
  postTitle_not_in: [String!]
  postTitle_lt: String
  postTitle_lte: String
  postTitle_gt: String
  postTitle_gte: String
  postTitle_contains: String
  postTitle_not_contains: String
  postTitle_starts_with: String
  postTitle_not_starts_with: String
  postTitle_ends_with: String
  postTitle_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  totalViewers: Int
  totalViewers_not: Int
  totalViewers_in: [Int!]
  totalViewers_not_in: [Int!]
  totalViewers_lt: Int
  totalViewers_lte: Int
  totalViewers_gt: Int
  totalViewers_gte: Int
  images_every: PostImageWhereInput
  images_some: PostImageWhereInput
  images_none: PostImageWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  NOT: [BlogPostWhereInput!]
}

input BlogPostWhereUniqueInput {
  id: Int
}

type BlogPreviousValues {
  id: Int!
  bannerImage: String!
  createdDate: DateTime!
  name: String!
  status: Int!
  updatedAt: DateTime
}

type BlogSubscriptionPayload {
  mutation: MutationType!
  node: Blog
  updatedFields: [String!]
  previousValues: BlogPreviousValues
}

input BlogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogWhereInput
  AND: [BlogSubscriptionWhereInput!]
  OR: [BlogSubscriptionWhereInput!]
  NOT: [BlogSubscriptionWhereInput!]
}

input BlogUpdateDataInput {
  bannerImage: String
  hospitalId: HospitalUpdateOneInput
  name: String
  status: Int
}

input BlogUpdateInput {
  bannerImage: String
  hospitalId: HospitalUpdateOneInput
  name: String
  status: Int
}

input BlogUpdateManyMutationInput {
  bannerImage: String
  name: String
  status: Int
}

input BlogUpdateOneInput {
  create: BlogCreateInput
  update: BlogUpdateDataInput
  upsert: BlogUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BlogWhereUniqueInput
}

input BlogUpsertNestedInput {
  update: BlogUpdateDataInput!
  create: BlogCreateInput!
}

input BlogWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  bannerImage: String
  bannerImage_not: String
  bannerImage_in: [String!]
  bannerImage_not_in: [String!]
  bannerImage_lt: String
  bannerImage_lte: String
  bannerImage_gt: String
  bannerImage_gte: String
  bannerImage_contains: String
  bannerImage_not_contains: String
  bannerImage_starts_with: String
  bannerImage_not_starts_with: String
  bannerImage_ends_with: String
  bannerImage_not_ends_with: String
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  hospitalId: HospitalWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
}

input BlogWhereUniqueInput {
  id: Int
}

type City {
  id: Int!
  city: String
  cityArabic: String!
  countryId: Int
  hospital(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CityConnection {
  pageInfo: PageInfo!
  edges: [CityEdge]!
  aggregate: AggregateCity!
}

input CityCreateInput {
  id: Int
  city: String
  cityArabic: String!
  countryId: Int
  hospital: HospitalCreateManyWithoutCityInput
}

input CityCreateOneWithoutHospitalInput {
  create: CityCreateWithoutHospitalInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutHospitalInput {
  id: Int
  city: String
  cityArabic: String!
  countryId: Int
}

type CityEdge {
  node: City!
  cursor: String!
}

enum CityOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  cityArabic_ASC
  cityArabic_DESC
  countryId_ASC
  countryId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CityPreviousValues {
  id: Int!
  city: String
  cityArabic: String!
  countryId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CitySubscriptionPayload {
  mutation: MutationType!
  node: City
  updatedFields: [String!]
  previousValues: CityPreviousValues
}

input CitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CityWhereInput
  AND: [CitySubscriptionWhereInput!]
  OR: [CitySubscriptionWhereInput!]
  NOT: [CitySubscriptionWhereInput!]
}

input CityUpdateInput {
  city: String
  cityArabic: String
  countryId: Int
  hospital: HospitalUpdateManyWithoutCityInput
}

input CityUpdateManyMutationInput {
  city: String
  cityArabic: String
  countryId: Int
}

input CityUpdateOneWithoutHospitalInput {
  create: CityCreateWithoutHospitalInput
  update: CityUpdateWithoutHospitalDataInput
  upsert: CityUpsertWithoutHospitalInput
  delete: Boolean
  disconnect: Boolean
  connect: CityWhereUniqueInput
}

input CityUpdateWithoutHospitalDataInput {
  city: String
  cityArabic: String
  countryId: Int
}

input CityUpsertWithoutHospitalInput {
  update: CityUpdateWithoutHospitalDataInput!
  create: CityCreateWithoutHospitalInput!
}

input CityWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  cityArabic: String
  cityArabic_not: String
  cityArabic_in: [String!]
  cityArabic_not_in: [String!]
  cityArabic_lt: String
  cityArabic_lte: String
  cityArabic_gt: String
  cityArabic_gte: String
  cityArabic_contains: String
  cityArabic_not_contains: String
  cityArabic_starts_with: String
  cityArabic_not_starts_with: String
  cityArabic_ends_with: String
  cityArabic_not_ends_with: String
  countryId: Int
  countryId_not: Int
  countryId_in: [Int!]
  countryId_not_in: [Int!]
  countryId_lt: Int
  countryId_lte: Int
  countryId_gt: Int
  countryId_gte: Int
  hospital_every: HospitalWhereInput
  hospital_some: HospitalWhereInput
  hospital_none: HospitalWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
}

input CityWhereUniqueInput {
  id: Int
}

type ContactUs {
  id: Int!
  address: String!
  email: String!
  lat: String!
  lon: String!
  phone: String!
  pobox: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContactUsConnection {
  pageInfo: PageInfo!
  edges: [ContactUsEdge]!
  aggregate: AggregateContactUs!
}

input ContactUsCreateInput {
  id: Int
  address: String!
  email: String!
  lat: String!
  lon: String!
  phone: String!
  pobox: String!
}

type ContactUsEdge {
  node: ContactUs!
  cursor: String!
}

enum ContactUsOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  email_ASC
  email_DESC
  lat_ASC
  lat_DESC
  lon_ASC
  lon_DESC
  phone_ASC
  phone_DESC
  pobox_ASC
  pobox_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContactUsPreviousValues {
  id: Int!
  address: String!
  email: String!
  lat: String!
  lon: String!
  phone: String!
  pobox: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContactUsSubscriptionPayload {
  mutation: MutationType!
  node: ContactUs
  updatedFields: [String!]
  previousValues: ContactUsPreviousValues
}

input ContactUsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactUsWhereInput
  AND: [ContactUsSubscriptionWhereInput!]
  OR: [ContactUsSubscriptionWhereInput!]
  NOT: [ContactUsSubscriptionWhereInput!]
}

input ContactUsUpdateInput {
  address: String
  email: String
  lat: String
  lon: String
  phone: String
  pobox: String
}

input ContactUsUpdateManyMutationInput {
  address: String
  email: String
  lat: String
  lon: String
  phone: String
  pobox: String
}

input ContactUsWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  lat: String
  lat_not: String
  lat_in: [String!]
  lat_not_in: [String!]
  lat_lt: String
  lat_lte: String
  lat_gt: String
  lat_gte: String
  lat_contains: String
  lat_not_contains: String
  lat_starts_with: String
  lat_not_starts_with: String
  lat_ends_with: String
  lat_not_ends_with: String
  lon: String
  lon_not: String
  lon_in: [String!]
  lon_not_in: [String!]
  lon_lt: String
  lon_lte: String
  lon_gt: String
  lon_gte: String
  lon_contains: String
  lon_not_contains: String
  lon_starts_with: String
  lon_not_starts_with: String
  lon_ends_with: String
  lon_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  pobox: String
  pobox_not: String
  pobox_in: [String!]
  pobox_not_in: [String!]
  pobox_lt: String
  pobox_lte: String
  pobox_gt: String
  pobox_gte: String
  pobox_contains: String
  pobox_not_contains: String
  pobox_starts_with: String
  pobox_not_starts_with: String
  pobox_ends_with: String
  pobox_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ContactUsWhereInput!]
  OR: [ContactUsWhereInput!]
  NOT: [ContactUsWhereInput!]
}

input ContactUsWhereUniqueInput {
  id: Int
}

type Country {
  id: Int!
  country: String
  countryArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: Int
  country: String
  countryArabic: String!
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  country_ASC
  country_DESC
  countryArabic_ASC
  countryArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryPreviousValues {
  id: Int!
  country: String
  countryArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
  AND: [CountrySubscriptionWhereInput!]
  OR: [CountrySubscriptionWhereInput!]
  NOT: [CountrySubscriptionWhereInput!]
}

input CountryUpdateDataInput {
  country: String
  countryArabic: String
}

input CountryUpdateInput {
  country: String
  countryArabic: String
}

input CountryUpdateManyMutationInput {
  country: String
  countryArabic: String
}

input CountryUpdateOneInput {
  create: CountryCreateInput
  update: CountryUpdateDataInput
  upsert: CountryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CountryWhereUniqueInput
}

input CountryUpsertNestedInput {
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  countryArabic: String
  countryArabic_not: String
  countryArabic_in: [String!]
  countryArabic_not_in: [String!]
  countryArabic_lt: String
  countryArabic_lte: String
  countryArabic_gt: String
  countryArabic_gte: String
  countryArabic_contains: String
  countryArabic_not_contains: String
  countryArabic_starts_with: String
  countryArabic_not_starts_with: String
  countryArabic_ends_with: String
  countryArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
}

input CountryWhereUniqueInput {
  id: Int
}

scalar DateTime

type Disease {
  id: Int!
  disease: String
  diseaseArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DiseaseConnection {
  pageInfo: PageInfo!
  edges: [DiseaseEdge]!
  aggregate: AggregateDisease!
}

type DiseaseCovered {
  id: Int!
  diseaseId: Int
  insuranceCatId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DiseaseCoveredConnection {
  pageInfo: PageInfo!
  edges: [DiseaseCoveredEdge]!
  aggregate: AggregateDiseaseCovered!
}

input DiseaseCoveredCreateInput {
  id: Int
  diseaseId: Int
  insuranceCatId: Int
}

type DiseaseCoveredEdge {
  node: DiseaseCovered!
  cursor: String!
}

enum DiseaseCoveredOrderByInput {
  id_ASC
  id_DESC
  diseaseId_ASC
  diseaseId_DESC
  insuranceCatId_ASC
  insuranceCatId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiseaseCoveredPreviousValues {
  id: Int!
  diseaseId: Int
  insuranceCatId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DiseaseCoveredSubscriptionPayload {
  mutation: MutationType!
  node: DiseaseCovered
  updatedFields: [String!]
  previousValues: DiseaseCoveredPreviousValues
}

input DiseaseCoveredSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiseaseCoveredWhereInput
  AND: [DiseaseCoveredSubscriptionWhereInput!]
  OR: [DiseaseCoveredSubscriptionWhereInput!]
  NOT: [DiseaseCoveredSubscriptionWhereInput!]
}

input DiseaseCoveredUpdateInput {
  diseaseId: Int
  insuranceCatId: Int
}

input DiseaseCoveredUpdateManyMutationInput {
  diseaseId: Int
  insuranceCatId: Int
}

input DiseaseCoveredWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  diseaseId: Int
  diseaseId_not: Int
  diseaseId_in: [Int!]
  diseaseId_not_in: [Int!]
  diseaseId_lt: Int
  diseaseId_lte: Int
  diseaseId_gt: Int
  diseaseId_gte: Int
  insuranceCatId: Int
  insuranceCatId_not: Int
  insuranceCatId_in: [Int!]
  insuranceCatId_not_in: [Int!]
  insuranceCatId_lt: Int
  insuranceCatId_lte: Int
  insuranceCatId_gt: Int
  insuranceCatId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DiseaseCoveredWhereInput!]
  OR: [DiseaseCoveredWhereInput!]
  NOT: [DiseaseCoveredWhereInput!]
}

input DiseaseCoveredWhereUniqueInput {
  id: Int
}

input DiseaseCreateInput {
  id: Int
  disease: String
  diseaseArabic: String!
}

input DiseaseCreateOneInput {
  create: DiseaseCreateInput
  connect: DiseaseWhereUniqueInput
}

type DiseaseEdge {
  node: Disease!
  cursor: String!
}

enum DiseaseOrderByInput {
  id_ASC
  id_DESC
  disease_ASC
  disease_DESC
  diseaseArabic_ASC
  diseaseArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiseasePreviousValues {
  id: Int!
  disease: String
  diseaseArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DiseaseSubscriptionPayload {
  mutation: MutationType!
  node: Disease
  updatedFields: [String!]
  previousValues: DiseasePreviousValues
}

input DiseaseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiseaseWhereInput
  AND: [DiseaseSubscriptionWhereInput!]
  OR: [DiseaseSubscriptionWhereInput!]
  NOT: [DiseaseSubscriptionWhereInput!]
}

input DiseaseUpdateDataInput {
  disease: String
  diseaseArabic: String
}

input DiseaseUpdateInput {
  disease: String
  diseaseArabic: String
}

input DiseaseUpdateManyMutationInput {
  disease: String
  diseaseArabic: String
}

input DiseaseUpdateOneInput {
  create: DiseaseCreateInput
  update: DiseaseUpdateDataInput
  upsert: DiseaseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DiseaseWhereUniqueInput
}

input DiseaseUpsertNestedInput {
  update: DiseaseUpdateDataInput!
  create: DiseaseCreateInput!
}

input DiseaseWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  disease: String
  disease_not: String
  disease_in: [String!]
  disease_not_in: [String!]
  disease_lt: String
  disease_lte: String
  disease_gt: String
  disease_gte: String
  disease_contains: String
  disease_not_contains: String
  disease_starts_with: String
  disease_not_starts_with: String
  disease_ends_with: String
  disease_not_ends_with: String
  diseaseArabic: String
  diseaseArabic_not: String
  diseaseArabic_in: [String!]
  diseaseArabic_not_in: [String!]
  diseaseArabic_lt: String
  diseaseArabic_lte: String
  diseaseArabic_gt: String
  diseaseArabic_gte: String
  diseaseArabic_contains: String
  diseaseArabic_not_contains: String
  diseaseArabic_starts_with: String
  diseaseArabic_not_starts_with: String
  diseaseArabic_ends_with: String
  diseaseArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
}

input DiseaseWhereUniqueInput {
  id: Int
}

type Doctor {
  id: Int!
  apiKey: String!
  designation: String
  doctorCv: String!
  email: String
  gender: String
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String
  password: String!
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: Speciality
  hospital(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital!]
  status: Int
  updatedAt: DateTime
  createdDate: DateTime!
}

type DoctorConnection {
  pageInfo: PageInfo!
  edges: [DoctorEdge]!
  aggregate: AggregateDoctor!
}

input DoctorCreateInput {
  id: Int
  apiKey: String!
  designation: String
  doctorCv: String!
  email: String
  gender: String
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: SpecialityCreateOneWithoutDoctorsInput
  hospital: HospitalCreateManyWithoutDoctorsInput
  status: Int
}

input DoctorCreateManyWithoutHospitalInput {
  create: [DoctorCreateWithoutHospitalInput!]
  connect: [DoctorWhereUniqueInput!]
}

input DoctorCreateManyWithoutSpecialitiesInput {
  create: [DoctorCreateWithoutSpecialitiesInput!]
  connect: [DoctorWhereUniqueInput!]
}

input DoctorCreateOneInput {
  create: DoctorCreateInput
  connect: DoctorWhereUniqueInput
}

input DoctorCreateWithoutHospitalInput {
  id: Int
  apiKey: String!
  designation: String
  doctorCv: String!
  email: String
  gender: String
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: SpecialityCreateOneWithoutDoctorsInput
  status: Int
}

input DoctorCreateWithoutSpecialitiesInput {
  id: Int
  apiKey: String!
  designation: String
  doctorCv: String!
  email: String
  gender: String
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  hospital: HospitalCreateManyWithoutDoctorsInput
  status: Int
}

type DoctorEdge {
  node: Doctor!
  cursor: String!
}

type DoctorOld {
  id: Int!
  apiKey: String!
  createdDate: DateTime!
  designation: String!
  doctorCv: String!
  doctorsRating(where: DoctorsRatingWhereInput, orderBy: DoctorsRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DoctorsRating!]
  email: String
  gender: String!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String!
  phone: String
  fees: String
  picture: String
  speciality: Speciality
  status: Int
  updatedAt: DateTime!
}

type DoctorOldConnection {
  pageInfo: PageInfo!
  edges: [DoctorOldEdge]!
  aggregate: AggregateDoctorOld!
}

input DoctorOldCreateInput {
  id: Int
  apiKey: String!
  designation: String!
  doctorCv: String!
  doctorsRating: DoctorsRatingCreateManyWithoutDoctorsInput
  email: String
  gender: String!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String
  phone: String
  fees: String
  picture: String
  speciality: SpecialityCreateOneInput
  status: Int
}

input DoctorOldCreateOneWithoutDoctorsRatingInput {
  create: DoctorOldCreateWithoutDoctorsRatingInput
  connect: DoctorOldWhereUniqueInput
}

input DoctorOldCreateWithoutDoctorsRatingInput {
  id: Int
  apiKey: String!
  designation: String!
  doctorCv: String!
  email: String
  gender: String!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String
  phone: String
  fees: String
  picture: String
  speciality: SpecialityCreateOneInput
  status: Int
}

type DoctorOldEdge {
  node: DoctorOld!
  cursor: String!
}

enum DoctorOldOrderByInput {
  id_ASC
  id_DESC
  apiKey_ASC
  apiKey_DESC
  createdDate_ASC
  createdDate_DESC
  designation_ASC
  designation_DESC
  doctorCv_ASC
  doctorCv_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  mohcard_ASC
  mohcard_DESC
  mohId_ASC
  mohId_DESC
  name_ASC
  name_DESC
  nameArabic_ASC
  nameArabic_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  fees_ASC
  fees_DESC
  picture_ASC
  picture_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DoctorOldPreviousValues {
  id: Int!
  apiKey: String!
  createdDate: DateTime!
  designation: String!
  doctorCv: String!
  email: String
  gender: String!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String!
  phone: String
  fees: String
  picture: String
  status: Int
  updatedAt: DateTime!
}

type DoctorOldSubscriptionPayload {
  mutation: MutationType!
  node: DoctorOld
  updatedFields: [String!]
  previousValues: DoctorOldPreviousValues
}

input DoctorOldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoctorOldWhereInput
  AND: [DoctorOldSubscriptionWhereInput!]
  OR: [DoctorOldSubscriptionWhereInput!]
  NOT: [DoctorOldSubscriptionWhereInput!]
}

input DoctorOldUpdateInput {
  apiKey: String
  designation: String
  doctorCv: String
  doctorsRating: DoctorsRatingUpdateManyWithoutDoctorsInput
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  speciality: SpecialityUpdateOneInput
  status: Int
}

input DoctorOldUpdateManyMutationInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  status: Int
}

input DoctorOldUpdateOneWithoutDoctorsRatingInput {
  create: DoctorOldCreateWithoutDoctorsRatingInput
  update: DoctorOldUpdateWithoutDoctorsRatingDataInput
  upsert: DoctorOldUpsertWithoutDoctorsRatingInput
  delete: Boolean
  disconnect: Boolean
  connect: DoctorOldWhereUniqueInput
}

input DoctorOldUpdateWithoutDoctorsRatingDataInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  speciality: SpecialityUpdateOneInput
  status: Int
}

input DoctorOldUpsertWithoutDoctorsRatingInput {
  update: DoctorOldUpdateWithoutDoctorsRatingDataInput!
  create: DoctorOldCreateWithoutDoctorsRatingInput!
}

input DoctorOldWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  designation: String
  designation_not: String
  designation_in: [String!]
  designation_not_in: [String!]
  designation_lt: String
  designation_lte: String
  designation_gt: String
  designation_gte: String
  designation_contains: String
  designation_not_contains: String
  designation_starts_with: String
  designation_not_starts_with: String
  designation_ends_with: String
  designation_not_ends_with: String
  doctorCv: String
  doctorCv_not: String
  doctorCv_in: [String!]
  doctorCv_not_in: [String!]
  doctorCv_lt: String
  doctorCv_lte: String
  doctorCv_gt: String
  doctorCv_gte: String
  doctorCv_contains: String
  doctorCv_not_contains: String
  doctorCv_starts_with: String
  doctorCv_not_starts_with: String
  doctorCv_ends_with: String
  doctorCv_not_ends_with: String
  doctorsRating_every: DoctorsRatingWhereInput
  doctorsRating_some: DoctorsRatingWhereInput
  doctorsRating_none: DoctorsRatingWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  mohcard: String
  mohcard_not: String
  mohcard_in: [String!]
  mohcard_not_in: [String!]
  mohcard_lt: String
  mohcard_lte: String
  mohcard_gt: String
  mohcard_gte: String
  mohcard_contains: String
  mohcard_not_contains: String
  mohcard_starts_with: String
  mohcard_not_starts_with: String
  mohcard_ends_with: String
  mohcard_not_ends_with: String
  mohId: String
  mohId_not: String
  mohId_in: [String!]
  mohId_not_in: [String!]
  mohId_lt: String
  mohId_lte: String
  mohId_gt: String
  mohId_gte: String
  mohId_contains: String
  mohId_not_contains: String
  mohId_starts_with: String
  mohId_not_starts_with: String
  mohId_ends_with: String
  mohId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nameArabic: String
  nameArabic_not: String
  nameArabic_in: [String!]
  nameArabic_not_in: [String!]
  nameArabic_lt: String
  nameArabic_lte: String
  nameArabic_gt: String
  nameArabic_gte: String
  nameArabic_contains: String
  nameArabic_not_contains: String
  nameArabic_starts_with: String
  nameArabic_not_starts_with: String
  nameArabic_ends_with: String
  nameArabic_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  fees: String
  fees_not: String
  fees_in: [String!]
  fees_not_in: [String!]
  fees_lt: String
  fees_lte: String
  fees_gt: String
  fees_gte: String
  fees_contains: String
  fees_not_contains: String
  fees_starts_with: String
  fees_not_starts_with: String
  fees_ends_with: String
  fees_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  speciality: SpecialityWhereInput
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DoctorOldWhereInput!]
  OR: [DoctorOldWhereInput!]
  NOT: [DoctorOldWhereInput!]
}

input DoctorOldWhereUniqueInput {
  id: Int
}

enum DoctorOrderByInput {
  id_ASC
  id_DESC
  apiKey_ASC
  apiKey_DESC
  designation_ASC
  designation_DESC
  doctorCv_ASC
  doctorCv_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  mohcard_ASC
  mohcard_DESC
  mohId_ASC
  mohId_DESC
  name_ASC
  name_DESC
  nameArabic_ASC
  nameArabic_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  fees_ASC
  fees_DESC
  picture_ASC
  picture_DESC
  specialityId_ASC
  specialityId_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdDate_ASC
  createdDate_DESC
}

type DoctorPreviousValues {
  id: Int!
  apiKey: String!
  designation: String
  doctorCv: String!
  email: String
  gender: String
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String
  password: String!
  phone: String
  fees: String
  picture: String
  specialityId: Int
  status: Int
  updatedAt: DateTime
  createdDate: DateTime!
}

input DoctorScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  designation: String
  designation_not: String
  designation_in: [String!]
  designation_not_in: [String!]
  designation_lt: String
  designation_lte: String
  designation_gt: String
  designation_gte: String
  designation_contains: String
  designation_not_contains: String
  designation_starts_with: String
  designation_not_starts_with: String
  designation_ends_with: String
  designation_not_ends_with: String
  doctorCv: String
  doctorCv_not: String
  doctorCv_in: [String!]
  doctorCv_not_in: [String!]
  doctorCv_lt: String
  doctorCv_lte: String
  doctorCv_gt: String
  doctorCv_gte: String
  doctorCv_contains: String
  doctorCv_not_contains: String
  doctorCv_starts_with: String
  doctorCv_not_starts_with: String
  doctorCv_ends_with: String
  doctorCv_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  mohcard: String
  mohcard_not: String
  mohcard_in: [String!]
  mohcard_not_in: [String!]
  mohcard_lt: String
  mohcard_lte: String
  mohcard_gt: String
  mohcard_gte: String
  mohcard_contains: String
  mohcard_not_contains: String
  mohcard_starts_with: String
  mohcard_not_starts_with: String
  mohcard_ends_with: String
  mohcard_not_ends_with: String
  mohId: String
  mohId_not: String
  mohId_in: [String!]
  mohId_not_in: [String!]
  mohId_lt: String
  mohId_lte: String
  mohId_gt: String
  mohId_gte: String
  mohId_contains: String
  mohId_not_contains: String
  mohId_starts_with: String
  mohId_not_starts_with: String
  mohId_ends_with: String
  mohId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nameArabic: String
  nameArabic_not: String
  nameArabic_in: [String!]
  nameArabic_not_in: [String!]
  nameArabic_lt: String
  nameArabic_lte: String
  nameArabic_gt: String
  nameArabic_gte: String
  nameArabic_contains: String
  nameArabic_not_contains: String
  nameArabic_starts_with: String
  nameArabic_not_starts_with: String
  nameArabic_ends_with: String
  nameArabic_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  fees: String
  fees_not: String
  fees_in: [String!]
  fees_not_in: [String!]
  fees_lt: String
  fees_lte: String
  fees_gt: String
  fees_gte: String
  fees_contains: String
  fees_not_contains: String
  fees_starts_with: String
  fees_not_starts_with: String
  fees_ends_with: String
  fees_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  specialityId: Int
  specialityId_not: Int
  specialityId_in: [Int!]
  specialityId_not_in: [Int!]
  specialityId_lt: Int
  specialityId_lte: Int
  specialityId_gt: Int
  specialityId_gte: Int
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  AND: [DoctorScalarWhereInput!]
  OR: [DoctorScalarWhereInput!]
  NOT: [DoctorScalarWhereInput!]
}

type DoctorShedule {
  id: Int!
  date: Int
  doctorId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DoctorSheduleConnection {
  pageInfo: PageInfo!
  edges: [DoctorSheduleEdge]!
  aggregate: AggregateDoctorShedule!
}

input DoctorSheduleCreateInput {
  id: Int
  date: Int
  doctorId: Int
}

type DoctorSheduleEdge {
  node: DoctorShedule!
  cursor: String!
}

enum DoctorSheduleOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  doctorId_ASC
  doctorId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DoctorShedulePreviousValues {
  id: Int!
  date: Int
  doctorId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DoctorSheduleSubscriptionPayload {
  mutation: MutationType!
  node: DoctorShedule
  updatedFields: [String!]
  previousValues: DoctorShedulePreviousValues
}

input DoctorSheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoctorSheduleWhereInput
  AND: [DoctorSheduleSubscriptionWhereInput!]
  OR: [DoctorSheduleSubscriptionWhereInput!]
  NOT: [DoctorSheduleSubscriptionWhereInput!]
}

type DoctorSheduleTime {
  id: Int!
  drSheduleId: Int
  scheduleTime: Int
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DoctorSheduleTimeConnection {
  pageInfo: PageInfo!
  edges: [DoctorSheduleTimeEdge]!
  aggregate: AggregateDoctorSheduleTime!
}

input DoctorSheduleTimeCreateInput {
  id: Int
  drSheduleId: Int
  scheduleTime: Int
  status: Int
}

input DoctorSheduleTimeCreateOneInput {
  create: DoctorSheduleTimeCreateInput
  connect: DoctorSheduleTimeWhereUniqueInput
}

type DoctorSheduleTimeEdge {
  node: DoctorSheduleTime!
  cursor: String!
}

enum DoctorSheduleTimeOrderByInput {
  id_ASC
  id_DESC
  drSheduleId_ASC
  drSheduleId_DESC
  scheduleTime_ASC
  scheduleTime_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DoctorSheduleTimePreviousValues {
  id: Int!
  drSheduleId: Int
  scheduleTime: Int
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DoctorSheduleTimeSubscriptionPayload {
  mutation: MutationType!
  node: DoctorSheduleTime
  updatedFields: [String!]
  previousValues: DoctorSheduleTimePreviousValues
}

input DoctorSheduleTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoctorSheduleTimeWhereInput
  AND: [DoctorSheduleTimeSubscriptionWhereInput!]
  OR: [DoctorSheduleTimeSubscriptionWhereInput!]
  NOT: [DoctorSheduleTimeSubscriptionWhereInput!]
}

input DoctorSheduleTimeUpdateDataInput {
  drSheduleId: Int
  scheduleTime: Int
  status: Int
}

input DoctorSheduleTimeUpdateInput {
  drSheduleId: Int
  scheduleTime: Int
  status: Int
}

input DoctorSheduleTimeUpdateManyMutationInput {
  drSheduleId: Int
  scheduleTime: Int
  status: Int
}

input DoctorSheduleTimeUpdateOneInput {
  create: DoctorSheduleTimeCreateInput
  update: DoctorSheduleTimeUpdateDataInput
  upsert: DoctorSheduleTimeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DoctorSheduleTimeWhereUniqueInput
}

input DoctorSheduleTimeUpsertNestedInput {
  update: DoctorSheduleTimeUpdateDataInput!
  create: DoctorSheduleTimeCreateInput!
}

input DoctorSheduleTimeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  drSheduleId: Int
  drSheduleId_not: Int
  drSheduleId_in: [Int!]
  drSheduleId_not_in: [Int!]
  drSheduleId_lt: Int
  drSheduleId_lte: Int
  drSheduleId_gt: Int
  drSheduleId_gte: Int
  scheduleTime: Int
  scheduleTime_not: Int
  scheduleTime_in: [Int!]
  scheduleTime_not_in: [Int!]
  scheduleTime_lt: Int
  scheduleTime_lte: Int
  scheduleTime_gt: Int
  scheduleTime_gte: Int
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DoctorSheduleTimeWhereInput!]
  OR: [DoctorSheduleTimeWhereInput!]
  NOT: [DoctorSheduleTimeWhereInput!]
}

input DoctorSheduleTimeWhereUniqueInput {
  id: Int
}

input DoctorSheduleUpdateInput {
  date: Int
  doctorId: Int
}

input DoctorSheduleUpdateManyMutationInput {
  date: Int
  doctorId: Int
}

input DoctorSheduleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  date: Int
  date_not: Int
  date_in: [Int!]
  date_not_in: [Int!]
  date_lt: Int
  date_lte: Int
  date_gt: Int
  date_gte: Int
  doctorId: Int
  doctorId_not: Int
  doctorId_in: [Int!]
  doctorId_not_in: [Int!]
  doctorId_lt: Int
  doctorId_lte: Int
  doctorId_gt: Int
  doctorId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DoctorSheduleWhereInput!]
  OR: [DoctorSheduleWhereInput!]
  NOT: [DoctorSheduleWhereInput!]
}

input DoctorSheduleWhereUniqueInput {
  id: Int
}

type DoctorsRating {
  id: Int!
  doctors: DoctorOld
  rating: String
  systemIp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DoctorsRatingConnection {
  pageInfo: PageInfo!
  edges: [DoctorsRatingEdge]!
  aggregate: AggregateDoctorsRating!
}

input DoctorsRatingCreateInput {
  id: Int
  doctors: DoctorOldCreateOneWithoutDoctorsRatingInput
  rating: String
  systemIp: String!
}

input DoctorsRatingCreateManyWithoutDoctorsInput {
  create: [DoctorsRatingCreateWithoutDoctorsInput!]
  connect: [DoctorsRatingWhereUniqueInput!]
}

input DoctorsRatingCreateWithoutDoctorsInput {
  id: Int
  rating: String
  systemIp: String!
}

type DoctorsRatingEdge {
  node: DoctorsRating!
  cursor: String!
}

enum DoctorsRatingOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  systemIp_ASC
  systemIp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DoctorsRatingPreviousValues {
  id: Int!
  rating: String
  systemIp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DoctorsRatingScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  systemIp: String
  systemIp_not: String
  systemIp_in: [String!]
  systemIp_not_in: [String!]
  systemIp_lt: String
  systemIp_lte: String
  systemIp_gt: String
  systemIp_gte: String
  systemIp_contains: String
  systemIp_not_contains: String
  systemIp_starts_with: String
  systemIp_not_starts_with: String
  systemIp_ends_with: String
  systemIp_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DoctorsRatingScalarWhereInput!]
  OR: [DoctorsRatingScalarWhereInput!]
  NOT: [DoctorsRatingScalarWhereInput!]
}

type DoctorsRatingSubscriptionPayload {
  mutation: MutationType!
  node: DoctorsRating
  updatedFields: [String!]
  previousValues: DoctorsRatingPreviousValues
}

input DoctorsRatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoctorsRatingWhereInput
  AND: [DoctorsRatingSubscriptionWhereInput!]
  OR: [DoctorsRatingSubscriptionWhereInput!]
  NOT: [DoctorsRatingSubscriptionWhereInput!]
}

input DoctorsRatingUpdateInput {
  doctors: DoctorOldUpdateOneWithoutDoctorsRatingInput
  rating: String
  systemIp: String
}

input DoctorsRatingUpdateManyDataInput {
  rating: String
  systemIp: String
}

input DoctorsRatingUpdateManyMutationInput {
  rating: String
  systemIp: String
}

input DoctorsRatingUpdateManyWithoutDoctorsInput {
  create: [DoctorsRatingCreateWithoutDoctorsInput!]
  delete: [DoctorsRatingWhereUniqueInput!]
  connect: [DoctorsRatingWhereUniqueInput!]
  set: [DoctorsRatingWhereUniqueInput!]
  disconnect: [DoctorsRatingWhereUniqueInput!]
  update: [DoctorsRatingUpdateWithWhereUniqueWithoutDoctorsInput!]
  upsert: [DoctorsRatingUpsertWithWhereUniqueWithoutDoctorsInput!]
  deleteMany: [DoctorsRatingScalarWhereInput!]
  updateMany: [DoctorsRatingUpdateManyWithWhereNestedInput!]
}

input DoctorsRatingUpdateManyWithWhereNestedInput {
  where: DoctorsRatingScalarWhereInput!
  data: DoctorsRatingUpdateManyDataInput!
}

input DoctorsRatingUpdateWithoutDoctorsDataInput {
  rating: String
  systemIp: String
}

input DoctorsRatingUpdateWithWhereUniqueWithoutDoctorsInput {
  where: DoctorsRatingWhereUniqueInput!
  data: DoctorsRatingUpdateWithoutDoctorsDataInput!
}

input DoctorsRatingUpsertWithWhereUniqueWithoutDoctorsInput {
  where: DoctorsRatingWhereUniqueInput!
  update: DoctorsRatingUpdateWithoutDoctorsDataInput!
  create: DoctorsRatingCreateWithoutDoctorsInput!
}

input DoctorsRatingWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  doctors: DoctorOldWhereInput
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  systemIp: String
  systemIp_not: String
  systemIp_in: [String!]
  systemIp_not_in: [String!]
  systemIp_lt: String
  systemIp_lte: String
  systemIp_gt: String
  systemIp_gte: String
  systemIp_contains: String
  systemIp_not_contains: String
  systemIp_starts_with: String
  systemIp_not_starts_with: String
  systemIp_ends_with: String
  systemIp_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DoctorsRatingWhereInput!]
  OR: [DoctorsRatingWhereInput!]
  NOT: [DoctorsRatingWhereInput!]
}

input DoctorsRatingWhereUniqueInput {
  id: Int
}

type DoctorSubscriptionPayload {
  mutation: MutationType!
  node: Doctor
  updatedFields: [String!]
  previousValues: DoctorPreviousValues
}

input DoctorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DoctorWhereInput
  AND: [DoctorSubscriptionWhereInput!]
  OR: [DoctorSubscriptionWhereInput!]
  NOT: [DoctorSubscriptionWhereInput!]
}

input DoctorUpdateDataInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: SpecialityUpdateOneWithoutDoctorsInput
  hospital: HospitalUpdateManyWithoutDoctorsInput
  status: Int
}

input DoctorUpdateInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: SpecialityUpdateOneWithoutDoctorsInput
  hospital: HospitalUpdateManyWithoutDoctorsInput
  status: Int
}

input DoctorUpdateManyDataInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  status: Int
}

input DoctorUpdateManyMutationInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  status: Int
}

input DoctorUpdateManyWithoutHospitalInput {
  create: [DoctorCreateWithoutHospitalInput!]
  delete: [DoctorWhereUniqueInput!]
  connect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
  disconnect: [DoctorWhereUniqueInput!]
  update: [DoctorUpdateWithWhereUniqueWithoutHospitalInput!]
  upsert: [DoctorUpsertWithWhereUniqueWithoutHospitalInput!]
  deleteMany: [DoctorScalarWhereInput!]
  updateMany: [DoctorUpdateManyWithWhereNestedInput!]
}

input DoctorUpdateManyWithoutSpecialitiesInput {
  create: [DoctorCreateWithoutSpecialitiesInput!]
  delete: [DoctorWhereUniqueInput!]
  connect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
  disconnect: [DoctorWhereUniqueInput!]
  update: [DoctorUpdateWithWhereUniqueWithoutSpecialitiesInput!]
  upsert: [DoctorUpsertWithWhereUniqueWithoutSpecialitiesInput!]
  deleteMany: [DoctorScalarWhereInput!]
  updateMany: [DoctorUpdateManyWithWhereNestedInput!]
}

input DoctorUpdateManyWithWhereNestedInput {
  where: DoctorScalarWhereInput!
  data: DoctorUpdateManyDataInput!
}

input DoctorUpdateOneInput {
  create: DoctorCreateInput
  update: DoctorUpdateDataInput
  upsert: DoctorUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DoctorWhereUniqueInput
}

input DoctorUpdateWithoutHospitalDataInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  specialities: SpecialityUpdateOneWithoutDoctorsInput
  status: Int
}

input DoctorUpdateWithoutSpecialitiesDataInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  fees: String
  picture: String
  specialityId: Int
  hospital: HospitalUpdateManyWithoutDoctorsInput
  status: Int
}

input DoctorUpdateWithWhereUniqueWithoutHospitalInput {
  where: DoctorWhereUniqueInput!
  data: DoctorUpdateWithoutHospitalDataInput!
}

input DoctorUpdateWithWhereUniqueWithoutSpecialitiesInput {
  where: DoctorWhereUniqueInput!
  data: DoctorUpdateWithoutSpecialitiesDataInput!
}

input DoctorUpsertNestedInput {
  update: DoctorUpdateDataInput!
  create: DoctorCreateInput!
}

input DoctorUpsertWithWhereUniqueWithoutHospitalInput {
  where: DoctorWhereUniqueInput!
  update: DoctorUpdateWithoutHospitalDataInput!
  create: DoctorCreateWithoutHospitalInput!
}

input DoctorUpsertWithWhereUniqueWithoutSpecialitiesInput {
  where: DoctorWhereUniqueInput!
  update: DoctorUpdateWithoutSpecialitiesDataInput!
  create: DoctorCreateWithoutSpecialitiesInput!
}

input DoctorWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  designation: String
  designation_not: String
  designation_in: [String!]
  designation_not_in: [String!]
  designation_lt: String
  designation_lte: String
  designation_gt: String
  designation_gte: String
  designation_contains: String
  designation_not_contains: String
  designation_starts_with: String
  designation_not_starts_with: String
  designation_ends_with: String
  designation_not_ends_with: String
  doctorCv: String
  doctorCv_not: String
  doctorCv_in: [String!]
  doctorCv_not_in: [String!]
  doctorCv_lt: String
  doctorCv_lte: String
  doctorCv_gt: String
  doctorCv_gte: String
  doctorCv_contains: String
  doctorCv_not_contains: String
  doctorCv_starts_with: String
  doctorCv_not_starts_with: String
  doctorCv_ends_with: String
  doctorCv_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  mohcard: String
  mohcard_not: String
  mohcard_in: [String!]
  mohcard_not_in: [String!]
  mohcard_lt: String
  mohcard_lte: String
  mohcard_gt: String
  mohcard_gte: String
  mohcard_contains: String
  mohcard_not_contains: String
  mohcard_starts_with: String
  mohcard_not_starts_with: String
  mohcard_ends_with: String
  mohcard_not_ends_with: String
  mohId: String
  mohId_not: String
  mohId_in: [String!]
  mohId_not_in: [String!]
  mohId_lt: String
  mohId_lte: String
  mohId_gt: String
  mohId_gte: String
  mohId_contains: String
  mohId_not_contains: String
  mohId_starts_with: String
  mohId_not_starts_with: String
  mohId_ends_with: String
  mohId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nameArabic: String
  nameArabic_not: String
  nameArabic_in: [String!]
  nameArabic_not_in: [String!]
  nameArabic_lt: String
  nameArabic_lte: String
  nameArabic_gt: String
  nameArabic_gte: String
  nameArabic_contains: String
  nameArabic_not_contains: String
  nameArabic_starts_with: String
  nameArabic_not_starts_with: String
  nameArabic_ends_with: String
  nameArabic_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  fees: String
  fees_not: String
  fees_in: [String!]
  fees_not_in: [String!]
  fees_lt: String
  fees_lte: String
  fees_gt: String
  fees_gte: String
  fees_contains: String
  fees_not_contains: String
  fees_starts_with: String
  fees_not_starts_with: String
  fees_ends_with: String
  fees_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  specialityId: Int
  specialityId_not: Int
  specialityId_in: [Int!]
  specialityId_not_in: [Int!]
  specialityId_lt: Int
  specialityId_lte: Int
  specialityId_gt: Int
  specialityId_gte: Int
  specialities: SpecialityWhereInput
  hospital_every: HospitalWhereInput
  hospital_some: HospitalWhereInput
  hospital_none: HospitalWhereInput
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  AND: [DoctorWhereInput!]
  OR: [DoctorWhereInput!]
  NOT: [DoctorWhereInput!]
}

input DoctorWhereUniqueInput {
  id: Int
}

type DrShedule {
  id: Int!
  date: DateTime
  doctorId: Int
  hospitalId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DrSheduleConnection {
  pageInfo: PageInfo!
  edges: [DrSheduleEdge]!
  aggregate: AggregateDrShedule!
}

input DrSheduleCreateInput {
  id: Int
  date: DateTime
  doctorId: Int
  hospitalId: Int
}

type DrSheduleEdge {
  node: DrShedule!
  cursor: String!
}

enum DrSheduleOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  doctorId_ASC
  doctorId_DESC
  hospitalId_ASC
  hospitalId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DrShedulePreviousValues {
  id: Int!
  date: DateTime
  doctorId: Int
  hospitalId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DrSheduleSubscriptionPayload {
  mutation: MutationType!
  node: DrShedule
  updatedFields: [String!]
  previousValues: DrShedulePreviousValues
}

input DrSheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DrSheduleWhereInput
  AND: [DrSheduleSubscriptionWhereInput!]
  OR: [DrSheduleSubscriptionWhereInput!]
  NOT: [DrSheduleSubscriptionWhereInput!]
}

input DrSheduleUpdateInput {
  date: DateTime
  doctorId: Int
  hospitalId: Int
}

input DrSheduleUpdateManyMutationInput {
  date: DateTime
  doctorId: Int
  hospitalId: Int
}

input DrSheduleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  doctorId: Int
  doctorId_not: Int
  doctorId_in: [Int!]
  doctorId_not_in: [Int!]
  doctorId_lt: Int
  doctorId_lte: Int
  doctorId_gt: Int
  doctorId_gte: Int
  hospitalId: Int
  hospitalId_not: Int
  hospitalId_in: [Int!]
  hospitalId_not_in: [Int!]
  hospitalId_lt: Int
  hospitalId_lte: Int
  hospitalId_gt: Int
  hospitalId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DrSheduleWhereInput!]
  OR: [DrSheduleWhereInput!]
  NOT: [DrSheduleWhereInput!]
}

input DrSheduleWhereUniqueInput {
  id: Int
}

type EmailSubscription {
  id: Int!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailSubscriptionConnection {
  pageInfo: PageInfo!
  edges: [EmailSubscriptionEdge]!
  aggregate: AggregateEmailSubscription!
}

input EmailSubscriptionCreateInput {
  id: Int
  email: String!
}

type EmailSubscriptionEdge {
  node: EmailSubscription!
  cursor: String!
}

enum EmailSubscriptionOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailSubscriptionPreviousValues {
  id: Int!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: EmailSubscription
  updatedFields: [String!]
  previousValues: EmailSubscriptionPreviousValues
}

input EmailSubscriptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmailSubscriptionWhereInput
  AND: [EmailSubscriptionSubscriptionWhereInput!]
  OR: [EmailSubscriptionSubscriptionWhereInput!]
  NOT: [EmailSubscriptionSubscriptionWhereInput!]
}

input EmailSubscriptionUpdateInput {
  email: String
}

input EmailSubscriptionUpdateManyMutationInput {
  email: String
}

input EmailSubscriptionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EmailSubscriptionWhereInput!]
  OR: [EmailSubscriptionWhereInput!]
  NOT: [EmailSubscriptionWhereInput!]
}

input EmailSubscriptionWhereUniqueInput {
  id: Int
}

type Facility {
  id: Int!
  facility: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FacilityConnection {
  pageInfo: PageInfo!
  edges: [FacilityEdge]!
  aggregate: AggregateFacility!
}

input FacilityCreateInput {
  id: Int
  facility: String
}

type FacilityEdge {
  node: Facility!
  cursor: String!
}

enum FacilityOrderByInput {
  id_ASC
  id_DESC
  facility_ASC
  facility_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FacilityPreviousValues {
  id: Int!
  facility: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FacilitySubscriptionPayload {
  mutation: MutationType!
  node: Facility
  updatedFields: [String!]
  previousValues: FacilityPreviousValues
}

input FacilitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FacilityWhereInput
  AND: [FacilitySubscriptionWhereInput!]
  OR: [FacilitySubscriptionWhereInput!]
  NOT: [FacilitySubscriptionWhereInput!]
}

input FacilityUpdateInput {
  facility: String
}

input FacilityUpdateManyMutationInput {
  facility: String
}

input FacilityWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  facility: String
  facility_not: String
  facility_in: [String!]
  facility_not_in: [String!]
  facility_lt: String
  facility_lte: String
  facility_gt: String
  facility_gte: String
  facility_contains: String
  facility_not_contains: String
  facility_starts_with: String
  facility_not_starts_with: String
  facility_ends_with: String
  facility_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
}

input FacilityWhereUniqueInput {
  id: Int
}

type Hospital {
  id: Int!
  address: String!
  addressArabic: String!
  apiKey: String!
  city: City
  countryId: Country
  email: String
  hospital: String
  hospitalArabic: String!
  doctors(where: DoctorWhereInput, orderBy: DoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doctor!]
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  insurances(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Insurance!]
  updatedAt: DateTime!
  createdAt: DateTime!
  createdDate: DateTime!
}

type HospitalConnection {
  pageInfo: PageInfo!
  edges: [HospitalEdge]!
  aggregate: AggregateHospital!
}

input HospitalCreateInput {
  id: Int
  address: String!
  addressArabic: String!
  apiKey: String!
  city: CityCreateOneWithoutHospitalInput
  countryId: CountryCreateOneInput
  email: String
  hospital: String
  hospitalArabic: String!
  doctors: DoctorCreateManyWithoutHospitalInput
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  insurances: InsuranceCreateManyWithoutHospitalsInput
  createdDate: DateTime!
}

input HospitalCreateManyWithoutCityInput {
  create: [HospitalCreateWithoutCityInput!]
  connect: [HospitalWhereUniqueInput!]
}

input HospitalCreateManyWithoutDoctorsInput {
  create: [HospitalCreateWithoutDoctorsInput!]
  connect: [HospitalWhereUniqueInput!]
}

input HospitalCreateManyWithoutInsurancesInput {
  create: [HospitalCreateWithoutInsurancesInput!]
  connect: [HospitalWhereUniqueInput!]
}

input HospitalCreateOneInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
}

input HospitalCreateWithoutCityInput {
  id: Int
  address: String!
  addressArabic: String!
  apiKey: String!
  countryId: CountryCreateOneInput
  email: String
  hospital: String
  hospitalArabic: String!
  doctors: DoctorCreateManyWithoutHospitalInput
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  insurances: InsuranceCreateManyWithoutHospitalsInput
  createdDate: DateTime!
}

input HospitalCreateWithoutDoctorsInput {
  id: Int
  address: String!
  addressArabic: String!
  apiKey: String!
  city: CityCreateOneWithoutHospitalInput
  countryId: CountryCreateOneInput
  email: String
  hospital: String
  hospitalArabic: String!
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  insurances: InsuranceCreateManyWithoutHospitalsInput
  createdDate: DateTime!
}

input HospitalCreateWithoutInsurancesInput {
  id: Int
  address: String!
  addressArabic: String!
  apiKey: String!
  city: CityCreateOneWithoutHospitalInput
  countryId: CountryCreateOneInput
  email: String
  hospital: String
  hospitalArabic: String!
  doctors: DoctorCreateManyWithoutHospitalInput
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  createdDate: DateTime!
}

type HospitalEdge {
  node: Hospital!
  cursor: String!
}

type HospitalFacility {
  id: Int!
  facilityId: Int
  hospitalId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HospitalFacilityConnection {
  pageInfo: PageInfo!
  edges: [HospitalFacilityEdge]!
  aggregate: AggregateHospitalFacility!
}

input HospitalFacilityCreateInput {
  id: Int
  facilityId: Int
  hospitalId: Int
}

type HospitalFacilityEdge {
  node: HospitalFacility!
  cursor: String!
}

enum HospitalFacilityOrderByInput {
  id_ASC
  id_DESC
  facilityId_ASC
  facilityId_DESC
  hospitalId_ASC
  hospitalId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HospitalFacilityPreviousValues {
  id: Int!
  facilityId: Int
  hospitalId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HospitalFacilitySubscriptionPayload {
  mutation: MutationType!
  node: HospitalFacility
  updatedFields: [String!]
  previousValues: HospitalFacilityPreviousValues
}

input HospitalFacilitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HospitalFacilityWhereInput
  AND: [HospitalFacilitySubscriptionWhereInput!]
  OR: [HospitalFacilitySubscriptionWhereInput!]
  NOT: [HospitalFacilitySubscriptionWhereInput!]
}

input HospitalFacilityUpdateInput {
  facilityId: Int
  hospitalId: Int
}

input HospitalFacilityUpdateManyMutationInput {
  facilityId: Int
  hospitalId: Int
}

input HospitalFacilityWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  facilityId: Int
  facilityId_not: Int
  facilityId_in: [Int!]
  facilityId_not_in: [Int!]
  facilityId_lt: Int
  facilityId_lte: Int
  facilityId_gt: Int
  facilityId_gte: Int
  hospitalId: Int
  hospitalId_not: Int
  hospitalId_in: [Int!]
  hospitalId_not_in: [Int!]
  hospitalId_lt: Int
  hospitalId_lte: Int
  hospitalId_gt: Int
  hospitalId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HospitalFacilityWhereInput!]
  OR: [HospitalFacilityWhereInput!]
  NOT: [HospitalFacilityWhereInput!]
}

input HospitalFacilityWhereUniqueInput {
  id: Int
}

enum HospitalOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  addressArabic_ASC
  addressArabic_DESC
  apiKey_ASC
  apiKey_DESC
  email_ASC
  email_DESC
  hospital_ASC
  hospital_DESC
  hospitalArabic_ASC
  hospitalArabic_DESC
  language_ASC
  language_DESC
  latitude_ASC
  latitude_DESC
  location_ASC
  location_DESC
  logo_ASC
  logo_DESC
  longitude_ASC
  longitude_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  phone1_ASC
  phone1_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  uniqeId_ASC
  uniqeId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  createdDate_ASC
  createdDate_DESC
}

type HospitalPreviousValues {
  id: Int!
  address: String!
  addressArabic: String!
  apiKey: String!
  email: String
  hospital: String
  hospitalArabic: String!
  language: String!
  latitude: String!
  location: String!
  logo: String
  longitude: String!
  password: String
  phone: String
  phone1: String!
  status: Int
  type: String
  uniqeId: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  createdDate: DateTime!
}

type HospitalRating {
  id: Int!
  hospitalId: Int
  rating: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HospitalRatingConnection {
  pageInfo: PageInfo!
  edges: [HospitalRatingEdge]!
  aggregate: AggregateHospitalRating!
}

input HospitalRatingCreateInput {
  id: Int
  hospitalId: Int
  rating: String
}

type HospitalRatingEdge {
  node: HospitalRating!
  cursor: String!
}

enum HospitalRatingOrderByInput {
  id_ASC
  id_DESC
  hospitalId_ASC
  hospitalId_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HospitalRatingPreviousValues {
  id: Int!
  hospitalId: Int
  rating: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HospitalRatingSubscriptionPayload {
  mutation: MutationType!
  node: HospitalRating
  updatedFields: [String!]
  previousValues: HospitalRatingPreviousValues
}

input HospitalRatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HospitalRatingWhereInput
  AND: [HospitalRatingSubscriptionWhereInput!]
  OR: [HospitalRatingSubscriptionWhereInput!]
  NOT: [HospitalRatingSubscriptionWhereInput!]
}

input HospitalRatingUpdateInput {
  hospitalId: Int
  rating: String
}

input HospitalRatingUpdateManyMutationInput {
  hospitalId: Int
  rating: String
}

input HospitalRatingWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  hospitalId: Int
  hospitalId_not: Int
  hospitalId_in: [Int!]
  hospitalId_not_in: [Int!]
  hospitalId_lt: Int
  hospitalId_lte: Int
  hospitalId_gt: Int
  hospitalId_gte: Int
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HospitalRatingWhereInput!]
  OR: [HospitalRatingWhereInput!]
  NOT: [HospitalRatingWhereInput!]
}

input HospitalRatingWhereUniqueInput {
  id: Int
}

input HospitalScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  addressArabic: String
  addressArabic_not: String
  addressArabic_in: [String!]
  addressArabic_not_in: [String!]
  addressArabic_lt: String
  addressArabic_lte: String
  addressArabic_gt: String
  addressArabic_gte: String
  addressArabic_contains: String
  addressArabic_not_contains: String
  addressArabic_starts_with: String
  addressArabic_not_starts_with: String
  addressArabic_ends_with: String
  addressArabic_not_ends_with: String
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  hospital: String
  hospital_not: String
  hospital_in: [String!]
  hospital_not_in: [String!]
  hospital_lt: String
  hospital_lte: String
  hospital_gt: String
  hospital_gte: String
  hospital_contains: String
  hospital_not_contains: String
  hospital_starts_with: String
  hospital_not_starts_with: String
  hospital_ends_with: String
  hospital_not_ends_with: String
  hospitalArabic: String
  hospitalArabic_not: String
  hospitalArabic_in: [String!]
  hospitalArabic_not_in: [String!]
  hospitalArabic_lt: String
  hospitalArabic_lte: String
  hospitalArabic_gt: String
  hospitalArabic_gte: String
  hospitalArabic_contains: String
  hospitalArabic_not_contains: String
  hospitalArabic_starts_with: String
  hospitalArabic_not_starts_with: String
  hospitalArabic_ends_with: String
  hospitalArabic_not_ends_with: String
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone1: String
  phone1_not: String
  phone1_in: [String!]
  phone1_not_in: [String!]
  phone1_lt: String
  phone1_lte: String
  phone1_gt: String
  phone1_gte: String
  phone1_contains: String
  phone1_not_contains: String
  phone1_starts_with: String
  phone1_not_starts_with: String
  phone1_ends_with: String
  phone1_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  uniqeId: String
  uniqeId_not: String
  uniqeId_in: [String!]
  uniqeId_not_in: [String!]
  uniqeId_lt: String
  uniqeId_lte: String
  uniqeId_gt: String
  uniqeId_gte: String
  uniqeId_contains: String
  uniqeId_not_contains: String
  uniqeId_starts_with: String
  uniqeId_not_starts_with: String
  uniqeId_ends_with: String
  uniqeId_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  AND: [HospitalScalarWhereInput!]
  OR: [HospitalScalarWhereInput!]
  NOT: [HospitalScalarWhereInput!]
}

type HospitalSubscriptionPayload {
  mutation: MutationType!
  node: Hospital
  updatedFields: [String!]
  previousValues: HospitalPreviousValues
}

input HospitalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HospitalWhereInput
  AND: [HospitalSubscriptionWhereInput!]
  OR: [HospitalSubscriptionWhereInput!]
  NOT: [HospitalSubscriptionWhereInput!]
}

input HospitalUpdateDataInput {
  address: String
  addressArabic: String
  apiKey: String
  city: CityUpdateOneWithoutHospitalInput
  countryId: CountryUpdateOneInput
  email: String
  hospital: String
  hospitalArabic: String
  doctors: DoctorUpdateManyWithoutHospitalInput
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  insurances: InsuranceUpdateManyWithoutHospitalsInput
  createdDate: DateTime
}

input HospitalUpdateInput {
  address: String
  addressArabic: String
  apiKey: String
  city: CityUpdateOneWithoutHospitalInput
  countryId: CountryUpdateOneInput
  email: String
  hospital: String
  hospitalArabic: String
  doctors: DoctorUpdateManyWithoutHospitalInput
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  insurances: InsuranceUpdateManyWithoutHospitalsInput
  createdDate: DateTime
}

input HospitalUpdateManyDataInput {
  address: String
  addressArabic: String
  apiKey: String
  email: String
  hospital: String
  hospitalArabic: String
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  createdDate: DateTime
}

input HospitalUpdateManyMutationInput {
  address: String
  addressArabic: String
  apiKey: String
  email: String
  hospital: String
  hospitalArabic: String
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  createdDate: DateTime
}

input HospitalUpdateManyWithoutCityInput {
  create: [HospitalCreateWithoutCityInput!]
  delete: [HospitalWhereUniqueInput!]
  connect: [HospitalWhereUniqueInput!]
  set: [HospitalWhereUniqueInput!]
  disconnect: [HospitalWhereUniqueInput!]
  update: [HospitalUpdateWithWhereUniqueWithoutCityInput!]
  upsert: [HospitalUpsertWithWhereUniqueWithoutCityInput!]
  deleteMany: [HospitalScalarWhereInput!]
  updateMany: [HospitalUpdateManyWithWhereNestedInput!]
}

input HospitalUpdateManyWithoutDoctorsInput {
  create: [HospitalCreateWithoutDoctorsInput!]
  delete: [HospitalWhereUniqueInput!]
  connect: [HospitalWhereUniqueInput!]
  set: [HospitalWhereUniqueInput!]
  disconnect: [HospitalWhereUniqueInput!]
  update: [HospitalUpdateWithWhereUniqueWithoutDoctorsInput!]
  upsert: [HospitalUpsertWithWhereUniqueWithoutDoctorsInput!]
  deleteMany: [HospitalScalarWhereInput!]
  updateMany: [HospitalUpdateManyWithWhereNestedInput!]
}

input HospitalUpdateManyWithoutInsurancesInput {
  create: [HospitalCreateWithoutInsurancesInput!]
  delete: [HospitalWhereUniqueInput!]
  connect: [HospitalWhereUniqueInput!]
  set: [HospitalWhereUniqueInput!]
  disconnect: [HospitalWhereUniqueInput!]
  update: [HospitalUpdateWithWhereUniqueWithoutInsurancesInput!]
  upsert: [HospitalUpsertWithWhereUniqueWithoutInsurancesInput!]
  deleteMany: [HospitalScalarWhereInput!]
  updateMany: [HospitalUpdateManyWithWhereNestedInput!]
}

input HospitalUpdateManyWithWhereNestedInput {
  where: HospitalScalarWhereInput!
  data: HospitalUpdateManyDataInput!
}

input HospitalUpdateOneInput {
  create: HospitalCreateInput
  update: HospitalUpdateDataInput
  upsert: HospitalUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: HospitalWhereUniqueInput
}

input HospitalUpdateWithoutCityDataInput {
  address: String
  addressArabic: String
  apiKey: String
  countryId: CountryUpdateOneInput
  email: String
  hospital: String
  hospitalArabic: String
  doctors: DoctorUpdateManyWithoutHospitalInput
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  insurances: InsuranceUpdateManyWithoutHospitalsInput
  createdDate: DateTime
}

input HospitalUpdateWithoutDoctorsDataInput {
  address: String
  addressArabic: String
  apiKey: String
  city: CityUpdateOneWithoutHospitalInput
  countryId: CountryUpdateOneInput
  email: String
  hospital: String
  hospitalArabic: String
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  insurances: InsuranceUpdateManyWithoutHospitalsInput
  createdDate: DateTime
}

input HospitalUpdateWithoutInsurancesDataInput {
  address: String
  addressArabic: String
  apiKey: String
  city: CityUpdateOneWithoutHospitalInput
  countryId: CountryUpdateOneInput
  email: String
  hospital: String
  hospitalArabic: String
  doctors: DoctorUpdateManyWithoutHospitalInput
  language: String
  latitude: String
  location: String
  logo: String
  longitude: String
  password: String
  phone: String
  phone1: String
  status: Int
  type: String
  uniqeId: String
  createdDate: DateTime
}

input HospitalUpdateWithWhereUniqueWithoutCityInput {
  where: HospitalWhereUniqueInput!
  data: HospitalUpdateWithoutCityDataInput!
}

input HospitalUpdateWithWhereUniqueWithoutDoctorsInput {
  where: HospitalWhereUniqueInput!
  data: HospitalUpdateWithoutDoctorsDataInput!
}

input HospitalUpdateWithWhereUniqueWithoutInsurancesInput {
  where: HospitalWhereUniqueInput!
  data: HospitalUpdateWithoutInsurancesDataInput!
}

input HospitalUpsertNestedInput {
  update: HospitalUpdateDataInput!
  create: HospitalCreateInput!
}

input HospitalUpsertWithWhereUniqueWithoutCityInput {
  where: HospitalWhereUniqueInput!
  update: HospitalUpdateWithoutCityDataInput!
  create: HospitalCreateWithoutCityInput!
}

input HospitalUpsertWithWhereUniqueWithoutDoctorsInput {
  where: HospitalWhereUniqueInput!
  update: HospitalUpdateWithoutDoctorsDataInput!
  create: HospitalCreateWithoutDoctorsInput!
}

input HospitalUpsertWithWhereUniqueWithoutInsurancesInput {
  where: HospitalWhereUniqueInput!
  update: HospitalUpdateWithoutInsurancesDataInput!
  create: HospitalCreateWithoutInsurancesInput!
}

input HospitalWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  addressArabic: String
  addressArabic_not: String
  addressArabic_in: [String!]
  addressArabic_not_in: [String!]
  addressArabic_lt: String
  addressArabic_lte: String
  addressArabic_gt: String
  addressArabic_gte: String
  addressArabic_contains: String
  addressArabic_not_contains: String
  addressArabic_starts_with: String
  addressArabic_not_starts_with: String
  addressArabic_ends_with: String
  addressArabic_not_ends_with: String
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  city: CityWhereInput
  countryId: CountryWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  hospital: String
  hospital_not: String
  hospital_in: [String!]
  hospital_not_in: [String!]
  hospital_lt: String
  hospital_lte: String
  hospital_gt: String
  hospital_gte: String
  hospital_contains: String
  hospital_not_contains: String
  hospital_starts_with: String
  hospital_not_starts_with: String
  hospital_ends_with: String
  hospital_not_ends_with: String
  hospitalArabic: String
  hospitalArabic_not: String
  hospitalArabic_in: [String!]
  hospitalArabic_not_in: [String!]
  hospitalArabic_lt: String
  hospitalArabic_lte: String
  hospitalArabic_gt: String
  hospitalArabic_gte: String
  hospitalArabic_contains: String
  hospitalArabic_not_contains: String
  hospitalArabic_starts_with: String
  hospitalArabic_not_starts_with: String
  hospitalArabic_ends_with: String
  hospitalArabic_not_ends_with: String
  doctors_every: DoctorWhereInput
  doctors_some: DoctorWhereInput
  doctors_none: DoctorWhereInput
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone1: String
  phone1_not: String
  phone1_in: [String!]
  phone1_not_in: [String!]
  phone1_lt: String
  phone1_lte: String
  phone1_gt: String
  phone1_gte: String
  phone1_contains: String
  phone1_not_contains: String
  phone1_starts_with: String
  phone1_not_starts_with: String
  phone1_ends_with: String
  phone1_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  uniqeId: String
  uniqeId_not: String
  uniqeId_in: [String!]
  uniqeId_not_in: [String!]
  uniqeId_lt: String
  uniqeId_lte: String
  uniqeId_gt: String
  uniqeId_gte: String
  uniqeId_contains: String
  uniqeId_not_contains: String
  uniqeId_starts_with: String
  uniqeId_not_starts_with: String
  uniqeId_ends_with: String
  uniqeId_not_ends_with: String
  insurances_every: InsuranceWhereInput
  insurances_some: InsuranceWhereInput
  insurances_none: InsuranceWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  AND: [HospitalWhereInput!]
  OR: [HospitalWhereInput!]
  NOT: [HospitalWhereInput!]
}

input HospitalWhereUniqueInput {
  id: Int
}

type Illness {
  id: Int!
  illness: String
  illnessArabic: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IllnessConnection {
  pageInfo: PageInfo!
  edges: [IllnessEdge]!
  aggregate: AggregateIllness!
}

input IllnessCreateInput {
  id: Int
  illness: String
  illnessArabic: String
}

type IllnessEdge {
  node: Illness!
  cursor: String!
}

enum IllnessOrderByInput {
  id_ASC
  id_DESC
  illness_ASC
  illness_DESC
  illnessArabic_ASC
  illnessArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IllnessPreviousValues {
  id: Int!
  illness: String
  illnessArabic: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IllnessSubscriptionPayload {
  mutation: MutationType!
  node: Illness
  updatedFields: [String!]
  previousValues: IllnessPreviousValues
}

input IllnessSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IllnessWhereInput
  AND: [IllnessSubscriptionWhereInput!]
  OR: [IllnessSubscriptionWhereInput!]
  NOT: [IllnessSubscriptionWhereInput!]
}

input IllnessUpdateInput {
  illness: String
  illnessArabic: String
}

input IllnessUpdateManyMutationInput {
  illness: String
  illnessArabic: String
}

input IllnessWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  illness: String
  illness_not: String
  illness_in: [String!]
  illness_not_in: [String!]
  illness_lt: String
  illness_lte: String
  illness_gt: String
  illness_gte: String
  illness_contains: String
  illness_not_contains: String
  illness_starts_with: String
  illness_not_starts_with: String
  illness_ends_with: String
  illness_not_ends_with: String
  illnessArabic: String
  illnessArabic_not: String
  illnessArabic_in: [String!]
  illnessArabic_not_in: [String!]
  illnessArabic_lt: String
  illnessArabic_lte: String
  illnessArabic_gt: String
  illnessArabic_gte: String
  illnessArabic_contains: String
  illnessArabic_not_contains: String
  illnessArabic_starts_with: String
  illnessArabic_not_starts_with: String
  illnessArabic_ends_with: String
  illnessArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [IllnessWhereInput!]
  OR: [IllnessWhereInput!]
  NOT: [IllnessWhereInput!]
}

input IllnessWhereUniqueInput {
  id: Int
}

type Insurance {
  id: Int!
  countryId: Int!
  hospitals(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital!]
  insurance: String
  insuranceArabic: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InsuranceCategory {
  id: Int!
  category: String
  insuranceId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InsuranceCategoryConnection {
  pageInfo: PageInfo!
  edges: [InsuranceCategoryEdge]!
  aggregate: AggregateInsuranceCategory!
}

input InsuranceCategoryCreateInput {
  id: Int
  category: String
  insuranceId: Int
}

type InsuranceCategoryEdge {
  node: InsuranceCategory!
  cursor: String!
}

enum InsuranceCategoryOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  insuranceId_ASC
  insuranceId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InsuranceCategoryPreviousValues {
  id: Int!
  category: String
  insuranceId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InsuranceCategorySubscriptionPayload {
  mutation: MutationType!
  node: InsuranceCategory
  updatedFields: [String!]
  previousValues: InsuranceCategoryPreviousValues
}

input InsuranceCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InsuranceCategoryWhereInput
  AND: [InsuranceCategorySubscriptionWhereInput!]
  OR: [InsuranceCategorySubscriptionWhereInput!]
  NOT: [InsuranceCategorySubscriptionWhereInput!]
}

input InsuranceCategoryUpdateInput {
  category: String
  insuranceId: Int
}

input InsuranceCategoryUpdateManyMutationInput {
  category: String
  insuranceId: Int
}

input InsuranceCategoryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  insuranceId: Int
  insuranceId_not: Int
  insuranceId_in: [Int!]
  insuranceId_not_in: [Int!]
  insuranceId_lt: Int
  insuranceId_lte: Int
  insuranceId_gt: Int
  insuranceId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InsuranceCategoryWhereInput!]
  OR: [InsuranceCategoryWhereInput!]
  NOT: [InsuranceCategoryWhereInput!]
}

input InsuranceCategoryWhereUniqueInput {
  id: Int
}

type InsuranceConnection {
  pageInfo: PageInfo!
  edges: [InsuranceEdge]!
  aggregate: AggregateInsurance!
}

input InsuranceCreateInput {
  id: Int
  countryId: Int!
  hospitals: HospitalCreateManyWithoutInsurancesInput
  insurance: String
  insuranceArabic: String
}

input InsuranceCreateManyWithoutHospitalsInput {
  create: [InsuranceCreateWithoutHospitalsInput!]
  connect: [InsuranceWhereUniqueInput!]
}

input InsuranceCreateWithoutHospitalsInput {
  id: Int
  countryId: Int!
  insurance: String
  insuranceArabic: String
}

type InsuranceEdge {
  node: Insurance!
  cursor: String!
}

enum InsuranceOrderByInput {
  id_ASC
  id_DESC
  countryId_ASC
  countryId_DESC
  insurance_ASC
  insurance_DESC
  insuranceArabic_ASC
  insuranceArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InsurancePreviousValues {
  id: Int!
  countryId: Int!
  insurance: String
  insuranceArabic: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input InsuranceScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  countryId: Int
  countryId_not: Int
  countryId_in: [Int!]
  countryId_not_in: [Int!]
  countryId_lt: Int
  countryId_lte: Int
  countryId_gt: Int
  countryId_gte: Int
  insurance: String
  insurance_not: String
  insurance_in: [String!]
  insurance_not_in: [String!]
  insurance_lt: String
  insurance_lte: String
  insurance_gt: String
  insurance_gte: String
  insurance_contains: String
  insurance_not_contains: String
  insurance_starts_with: String
  insurance_not_starts_with: String
  insurance_ends_with: String
  insurance_not_ends_with: String
  insuranceArabic: String
  insuranceArabic_not: String
  insuranceArabic_in: [String!]
  insuranceArabic_not_in: [String!]
  insuranceArabic_lt: String
  insuranceArabic_lte: String
  insuranceArabic_gt: String
  insuranceArabic_gte: String
  insuranceArabic_contains: String
  insuranceArabic_not_contains: String
  insuranceArabic_starts_with: String
  insuranceArabic_not_starts_with: String
  insuranceArabic_ends_with: String
  insuranceArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InsuranceScalarWhereInput!]
  OR: [InsuranceScalarWhereInput!]
  NOT: [InsuranceScalarWhereInput!]
}

type InsuranceSubscriptionPayload {
  mutation: MutationType!
  node: Insurance
  updatedFields: [String!]
  previousValues: InsurancePreviousValues
}

input InsuranceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InsuranceWhereInput
  AND: [InsuranceSubscriptionWhereInput!]
  OR: [InsuranceSubscriptionWhereInput!]
  NOT: [InsuranceSubscriptionWhereInput!]
}

input InsuranceUpdateInput {
  countryId: Int
  hospitals: HospitalUpdateManyWithoutInsurancesInput
  insurance: String
  insuranceArabic: String
}

input InsuranceUpdateManyDataInput {
  countryId: Int
  insurance: String
  insuranceArabic: String
}

input InsuranceUpdateManyMutationInput {
  countryId: Int
  insurance: String
  insuranceArabic: String
}

input InsuranceUpdateManyWithoutHospitalsInput {
  create: [InsuranceCreateWithoutHospitalsInput!]
  delete: [InsuranceWhereUniqueInput!]
  connect: [InsuranceWhereUniqueInput!]
  set: [InsuranceWhereUniqueInput!]
  disconnect: [InsuranceWhereUniqueInput!]
  update: [InsuranceUpdateWithWhereUniqueWithoutHospitalsInput!]
  upsert: [InsuranceUpsertWithWhereUniqueWithoutHospitalsInput!]
  deleteMany: [InsuranceScalarWhereInput!]
  updateMany: [InsuranceUpdateManyWithWhereNestedInput!]
}

input InsuranceUpdateManyWithWhereNestedInput {
  where: InsuranceScalarWhereInput!
  data: InsuranceUpdateManyDataInput!
}

input InsuranceUpdateWithoutHospitalsDataInput {
  countryId: Int
  insurance: String
  insuranceArabic: String
}

input InsuranceUpdateWithWhereUniqueWithoutHospitalsInput {
  where: InsuranceWhereUniqueInput!
  data: InsuranceUpdateWithoutHospitalsDataInput!
}

input InsuranceUpsertWithWhereUniqueWithoutHospitalsInput {
  where: InsuranceWhereUniqueInput!
  update: InsuranceUpdateWithoutHospitalsDataInput!
  create: InsuranceCreateWithoutHospitalsInput!
}

input InsuranceWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  countryId: Int
  countryId_not: Int
  countryId_in: [Int!]
  countryId_not_in: [Int!]
  countryId_lt: Int
  countryId_lte: Int
  countryId_gt: Int
  countryId_gte: Int
  hospitals_every: HospitalWhereInput
  hospitals_some: HospitalWhereInput
  hospitals_none: HospitalWhereInput
  insurance: String
  insurance_not: String
  insurance_in: [String!]
  insurance_not_in: [String!]
  insurance_lt: String
  insurance_lte: String
  insurance_gt: String
  insurance_gte: String
  insurance_contains: String
  insurance_not_contains: String
  insurance_starts_with: String
  insurance_not_starts_with: String
  insurance_ends_with: String
  insurance_not_ends_with: String
  insuranceArabic: String
  insuranceArabic_not: String
  insuranceArabic_in: [String!]
  insuranceArabic_not_in: [String!]
  insuranceArabic_lt: String
  insuranceArabic_lte: String
  insuranceArabic_gt: String
  insuranceArabic_gte: String
  insuranceArabic_contains: String
  insuranceArabic_not_contains: String
  insuranceArabic_starts_with: String
  insuranceArabic_not_starts_with: String
  insuranceArabic_ends_with: String
  insuranceArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InsuranceWhereInput!]
  OR: [InsuranceWhereInput!]
  NOT: [InsuranceWhereInput!]
}

input InsuranceWhereUniqueInput {
  id: Int
}

type Job {
  id: Int!
  position: String!
  positionArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  id: Int
  position: String!
  positionArabic: String!
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
  positionArabic_ASC
  positionArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type JobPreviousValues {
  id: Int!
  position: String!
  positionArabic: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateInput {
  position: String
  positionArabic: String
}

input JobUpdateManyMutationInput {
  position: String
  positionArabic: String
}

input JobWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  positionArabic: String
  positionArabic_not: String
  positionArabic_in: [String!]
  positionArabic_not_in: [String!]
  positionArabic_lt: String
  positionArabic_lte: String
  positionArabic_gt: String
  positionArabic_gte: String
  positionArabic_contains: String
  positionArabic_not_contains: String
  positionArabic_starts_with: String
  positionArabic_not_starts_with: String
  positionArabic_ends_with: String
  positionArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: Int
}

type Language {
  id: Int!
  language: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: Int
  language: String
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  language_ASC
  language_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LanguagePreviousValues {
  id: Int!
  language: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateInput {
  language: String
}

input LanguageUpdateManyMutationInput {
  language: String
}

input LanguageWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: Int
}

scalar Long

type Message {
  id: Int!
  fromUser: Int!
  isDelete: Int!
  isRead: Int!
  logCreate: DateTime!
  message: String!
  sentBy: Int!
  toUser: Int!
  updatedAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: Int
  fromUser: Int!
  isDelete: Int
  isRead: Int
  message: String!
  sentBy: Int!
  toUser: Int!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  fromUser_ASC
  fromUser_DESC
  isDelete_ASC
  isDelete_DESC
  isRead_ASC
  isRead_DESC
  logCreate_ASC
  logCreate_DESC
  message_ASC
  message_DESC
  sentBy_ASC
  sentBy_DESC
  toUser_ASC
  toUser_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: Int!
  fromUser: Int!
  isDelete: Int!
  isRead: Int!
  logCreate: DateTime!
  message: String!
  sentBy: Int!
  toUser: Int!
  updatedAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  fromUser: Int
  isDelete: Int
  isRead: Int
  message: String
  sentBy: Int
  toUser: Int
}

input MessageUpdateManyMutationInput {
  fromUser: Int
  isDelete: Int
  isRead: Int
  message: String
  sentBy: Int
  toUser: Int
}

input MessageWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  fromUser: Int
  fromUser_not: Int
  fromUser_in: [Int!]
  fromUser_not_in: [Int!]
  fromUser_lt: Int
  fromUser_lte: Int
  fromUser_gt: Int
  fromUser_gte: Int
  isDelete: Int
  isDelete_not: Int
  isDelete_in: [Int!]
  isDelete_not_in: [Int!]
  isDelete_lt: Int
  isDelete_lte: Int
  isDelete_gt: Int
  isDelete_gte: Int
  isRead: Int
  isRead_not: Int
  isRead_in: [Int!]
  isRead_not_in: [Int!]
  isRead_lt: Int
  isRead_lte: Int
  isRead_gt: Int
  isRead_gte: Int
  logCreate: DateTime
  logCreate_not: DateTime
  logCreate_in: [DateTime!]
  logCreate_not_in: [DateTime!]
  logCreate_lt: DateTime
  logCreate_lte: DateTime
  logCreate_gt: DateTime
  logCreate_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  sentBy: Int
  sentBy_not: Int
  sentBy_in: [Int!]
  sentBy_not_in: [Int!]
  sentBy_lt: Int
  sentBy_lte: Int
  sentBy_gt: Int
  sentBy_gte: Int
  toUser: Int
  toUser_not: Int
  toUser_in: [Int!]
  toUser_not_in: [Int!]
  toUser_lt: Int
  toUser_lte: Int
  toUser_gt: Int
  toUser_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: Int
}

type Migration {
  id: Int!
  batch: Int!
  migration: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MigrationConnection {
  pageInfo: PageInfo!
  edges: [MigrationEdge]!
  aggregate: AggregateMigration!
}

input MigrationCreateInput {
  id: Int
  batch: Int!
  migration: String!
}

type MigrationEdge {
  node: Migration!
  cursor: String!
}

enum MigrationOrderByInput {
  id_ASC
  id_DESC
  batch_ASC
  batch_DESC
  migration_ASC
  migration_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MigrationPreviousValues {
  id: Int!
  batch: Int!
  migration: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MigrationSubscriptionPayload {
  mutation: MutationType!
  node: Migration
  updatedFields: [String!]
  previousValues: MigrationPreviousValues
}

input MigrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MigrationWhereInput
  AND: [MigrationSubscriptionWhereInput!]
  OR: [MigrationSubscriptionWhereInput!]
  NOT: [MigrationSubscriptionWhereInput!]
}

input MigrationUpdateInput {
  batch: Int
  migration: String
}

input MigrationUpdateManyMutationInput {
  batch: Int
  migration: String
}

input MigrationWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  batch: Int
  batch_not: Int
  batch_in: [Int!]
  batch_not_in: [Int!]
  batch_lt: Int
  batch_lte: Int
  batch_gt: Int
  batch_gte: Int
  migration: String
  migration_not: String
  migration_in: [String!]
  migration_not_in: [String!]
  migration_lt: String
  migration_lte: String
  migration_gt: String
  migration_gte: String
  migration_contains: String
  migration_not_contains: String
  migration_starts_with: String
  migration_not_starts_with: String
  migration_ends_with: String
  migration_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MigrationWhereInput!]
  OR: [MigrationWhereInput!]
  NOT: [MigrationWhereInput!]
}

input MigrationWhereUniqueInput {
  id: Int
}

type Mutation {
  createAboutUs(data: AboutUsCreateInput!): AboutUs!
  updateAboutUs(data: AboutUsUpdateInput!, where: AboutUsWhereUniqueInput!): AboutUs
  updateManyAboutUses(data: AboutUsUpdateManyMutationInput!, where: AboutUsWhereInput): BatchPayload!
  upsertAboutUs(where: AboutUsWhereUniqueInput!, create: AboutUsCreateInput!, update: AboutUsUpdateInput!): AboutUs!
  deleteAboutUs(where: AboutUsWhereUniqueInput!): AboutUs
  deleteManyAboutUses(where: AboutUsWhereInput): BatchPayload!
  createAdmin(data: AdminCreateInput!): Admin!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  createAppointment(data: AppointmentCreateInput!): Appointment!
  updateAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateManyAppointments(data: AppointmentUpdateManyMutationInput!, where: AppointmentWhereInput): BatchPayload!
  upsertAppointment(where: AppointmentWhereUniqueInput!, create: AppointmentCreateInput!, update: AppointmentUpdateInput!): Appointment!
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteManyAppointments(where: AppointmentWhereInput): BatchPayload!
  createBlog(data: BlogCreateInput!): Blog!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog
  updateManyBlogs(data: BlogUpdateManyMutationInput!, where: BlogWhereInput): BatchPayload!
  upsertBlog(where: BlogWhereUniqueInput!, create: BlogCreateInput!, update: BlogUpdateInput!): Blog!
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteManyBlogs(where: BlogWhereInput): BatchPayload!
  createBlogComment(data: BlogCommentCreateInput!): BlogComment!
  updateBlogComment(data: BlogCommentUpdateInput!, where: BlogCommentWhereUniqueInput!): BlogComment
  updateManyBlogComments(data: BlogCommentUpdateManyMutationInput!, where: BlogCommentWhereInput): BatchPayload!
  upsertBlogComment(where: BlogCommentWhereUniqueInput!, create: BlogCommentCreateInput!, update: BlogCommentUpdateInput!): BlogComment!
  deleteBlogComment(where: BlogCommentWhereUniqueInput!): BlogComment
  deleteManyBlogComments(where: BlogCommentWhereInput): BatchPayload!
  createBlogPost(data: BlogPostCreateInput!): BlogPost!
  updateBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  updateManyBlogPosts(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  upsertBlogPost(where: BlogPostWhereUniqueInput!, create: BlogPostCreateInput!, update: BlogPostUpdateInput!): BlogPost!
  deleteBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteManyBlogPosts(where: BlogPostWhereInput): BatchPayload!
  createCity(data: CityCreateInput!): City!
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  updateManyCities(data: CityUpdateManyMutationInput!, where: CityWhereInput): BatchPayload!
  upsertCity(where: CityWhereUniqueInput!, create: CityCreateInput!, update: CityUpdateInput!): City!
  deleteCity(where: CityWhereUniqueInput!): City
  deleteManyCities(where: CityWhereInput): BatchPayload!
  createContactUs(data: ContactUsCreateInput!): ContactUs!
  updateContactUs(data: ContactUsUpdateInput!, where: ContactUsWhereUniqueInput!): ContactUs
  updateManyContactUses(data: ContactUsUpdateManyMutationInput!, where: ContactUsWhereInput): BatchPayload!
  upsertContactUs(where: ContactUsWhereUniqueInput!, create: ContactUsCreateInput!, update: ContactUsUpdateInput!): ContactUs!
  deleteContactUs(where: ContactUsWhereUniqueInput!): ContactUs
  deleteManyContactUses(where: ContactUsWhereInput): BatchPayload!
  createCountry(data: CountryCreateInput!): Country!
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  createDisease(data: DiseaseCreateInput!): Disease!
  updateDisease(data: DiseaseUpdateInput!, where: DiseaseWhereUniqueInput!): Disease
  updateManyDiseases(data: DiseaseUpdateManyMutationInput!, where: DiseaseWhereInput): BatchPayload!
  upsertDisease(where: DiseaseWhereUniqueInput!, create: DiseaseCreateInput!, update: DiseaseUpdateInput!): Disease!
  deleteDisease(where: DiseaseWhereUniqueInput!): Disease
  deleteManyDiseases(where: DiseaseWhereInput): BatchPayload!
  createDiseaseCovered(data: DiseaseCoveredCreateInput!): DiseaseCovered!
  updateDiseaseCovered(data: DiseaseCoveredUpdateInput!, where: DiseaseCoveredWhereUniqueInput!): DiseaseCovered
  updateManyDiseaseCovereds(data: DiseaseCoveredUpdateManyMutationInput!, where: DiseaseCoveredWhereInput): BatchPayload!
  upsertDiseaseCovered(where: DiseaseCoveredWhereUniqueInput!, create: DiseaseCoveredCreateInput!, update: DiseaseCoveredUpdateInput!): DiseaseCovered!
  deleteDiseaseCovered(where: DiseaseCoveredWhereUniqueInput!): DiseaseCovered
  deleteManyDiseaseCovereds(where: DiseaseCoveredWhereInput): BatchPayload!
  createDoctor(data: DoctorCreateInput!): Doctor!
  updateDoctor(data: DoctorUpdateInput!, where: DoctorWhereUniqueInput!): Doctor
  updateManyDoctors(data: DoctorUpdateManyMutationInput!, where: DoctorWhereInput): BatchPayload!
  upsertDoctor(where: DoctorWhereUniqueInput!, create: DoctorCreateInput!, update: DoctorUpdateInput!): Doctor!
  deleteDoctor(where: DoctorWhereUniqueInput!): Doctor
  deleteManyDoctors(where: DoctorWhereInput): BatchPayload!
  createDoctorOld(data: DoctorOldCreateInput!): DoctorOld!
  updateDoctorOld(data: DoctorOldUpdateInput!, where: DoctorOldWhereUniqueInput!): DoctorOld
  updateManyDoctorOlds(data: DoctorOldUpdateManyMutationInput!, where: DoctorOldWhereInput): BatchPayload!
  upsertDoctorOld(where: DoctorOldWhereUniqueInput!, create: DoctorOldCreateInput!, update: DoctorOldUpdateInput!): DoctorOld!
  deleteDoctorOld(where: DoctorOldWhereUniqueInput!): DoctorOld
  deleteManyDoctorOlds(where: DoctorOldWhereInput): BatchPayload!
  createDoctorShedule(data: DoctorSheduleCreateInput!): DoctorShedule!
  updateDoctorShedule(data: DoctorSheduleUpdateInput!, where: DoctorSheduleWhereUniqueInput!): DoctorShedule
  updateManyDoctorShedules(data: DoctorSheduleUpdateManyMutationInput!, where: DoctorSheduleWhereInput): BatchPayload!
  upsertDoctorShedule(where: DoctorSheduleWhereUniqueInput!, create: DoctorSheduleCreateInput!, update: DoctorSheduleUpdateInput!): DoctorShedule!
  deleteDoctorShedule(where: DoctorSheduleWhereUniqueInput!): DoctorShedule
  deleteManyDoctorShedules(where: DoctorSheduleWhereInput): BatchPayload!
  createDoctorSheduleTime(data: DoctorSheduleTimeCreateInput!): DoctorSheduleTime!
  updateDoctorSheduleTime(data: DoctorSheduleTimeUpdateInput!, where: DoctorSheduleTimeWhereUniqueInput!): DoctorSheduleTime
  updateManyDoctorSheduleTimes(data: DoctorSheduleTimeUpdateManyMutationInput!, where: DoctorSheduleTimeWhereInput): BatchPayload!
  upsertDoctorSheduleTime(where: DoctorSheduleTimeWhereUniqueInput!, create: DoctorSheduleTimeCreateInput!, update: DoctorSheduleTimeUpdateInput!): DoctorSheduleTime!
  deleteDoctorSheduleTime(where: DoctorSheduleTimeWhereUniqueInput!): DoctorSheduleTime
  deleteManyDoctorSheduleTimes(where: DoctorSheduleTimeWhereInput): BatchPayload!
  createDoctorsRating(data: DoctorsRatingCreateInput!): DoctorsRating!
  updateDoctorsRating(data: DoctorsRatingUpdateInput!, where: DoctorsRatingWhereUniqueInput!): DoctorsRating
  updateManyDoctorsRatings(data: DoctorsRatingUpdateManyMutationInput!, where: DoctorsRatingWhereInput): BatchPayload!
  upsertDoctorsRating(where: DoctorsRatingWhereUniqueInput!, create: DoctorsRatingCreateInput!, update: DoctorsRatingUpdateInput!): DoctorsRating!
  deleteDoctorsRating(where: DoctorsRatingWhereUniqueInput!): DoctorsRating
  deleteManyDoctorsRatings(where: DoctorsRatingWhereInput): BatchPayload!
  createDrShedule(data: DrSheduleCreateInput!): DrShedule!
  updateDrShedule(data: DrSheduleUpdateInput!, where: DrSheduleWhereUniqueInput!): DrShedule
  updateManyDrShedules(data: DrSheduleUpdateManyMutationInput!, where: DrSheduleWhereInput): BatchPayload!
  upsertDrShedule(where: DrSheduleWhereUniqueInput!, create: DrSheduleCreateInput!, update: DrSheduleUpdateInput!): DrShedule!
  deleteDrShedule(where: DrSheduleWhereUniqueInput!): DrShedule
  deleteManyDrShedules(where: DrSheduleWhereInput): BatchPayload!
  createEmailSubscription(data: EmailSubscriptionCreateInput!): EmailSubscription!
  updateEmailSubscription(data: EmailSubscriptionUpdateInput!, where: EmailSubscriptionWhereUniqueInput!): EmailSubscription
  updateManyEmailSubscriptions(data: EmailSubscriptionUpdateManyMutationInput!, where: EmailSubscriptionWhereInput): BatchPayload!
  upsertEmailSubscription(where: EmailSubscriptionWhereUniqueInput!, create: EmailSubscriptionCreateInput!, update: EmailSubscriptionUpdateInput!): EmailSubscription!
  deleteEmailSubscription(where: EmailSubscriptionWhereUniqueInput!): EmailSubscription
  deleteManyEmailSubscriptions(where: EmailSubscriptionWhereInput): BatchPayload!
  createFacility(data: FacilityCreateInput!): Facility!
  updateFacility(data: FacilityUpdateInput!, where: FacilityWhereUniqueInput!): Facility
  updateManyFacilities(data: FacilityUpdateManyMutationInput!, where: FacilityWhereInput): BatchPayload!
  upsertFacility(where: FacilityWhereUniqueInput!, create: FacilityCreateInput!, update: FacilityUpdateInput!): Facility!
  deleteFacility(where: FacilityWhereUniqueInput!): Facility
  deleteManyFacilities(where: FacilityWhereInput): BatchPayload!
  createHospital(data: HospitalCreateInput!): Hospital!
  updateHospital(data: HospitalUpdateInput!, where: HospitalWhereUniqueInput!): Hospital
  updateManyHospitals(data: HospitalUpdateManyMutationInput!, where: HospitalWhereInput): BatchPayload!
  upsertHospital(where: HospitalWhereUniqueInput!, create: HospitalCreateInput!, update: HospitalUpdateInput!): Hospital!
  deleteHospital(where: HospitalWhereUniqueInput!): Hospital
  deleteManyHospitals(where: HospitalWhereInput): BatchPayload!
  createHospitalFacility(data: HospitalFacilityCreateInput!): HospitalFacility!
  updateHospitalFacility(data: HospitalFacilityUpdateInput!, where: HospitalFacilityWhereUniqueInput!): HospitalFacility
  updateManyHospitalFacilities(data: HospitalFacilityUpdateManyMutationInput!, where: HospitalFacilityWhereInput): BatchPayload!
  upsertHospitalFacility(where: HospitalFacilityWhereUniqueInput!, create: HospitalFacilityCreateInput!, update: HospitalFacilityUpdateInput!): HospitalFacility!
  deleteHospitalFacility(where: HospitalFacilityWhereUniqueInput!): HospitalFacility
  deleteManyHospitalFacilities(where: HospitalFacilityWhereInput): BatchPayload!
  createHospitalRating(data: HospitalRatingCreateInput!): HospitalRating!
  updateHospitalRating(data: HospitalRatingUpdateInput!, where: HospitalRatingWhereUniqueInput!): HospitalRating
  updateManyHospitalRatings(data: HospitalRatingUpdateManyMutationInput!, where: HospitalRatingWhereInput): BatchPayload!
  upsertHospitalRating(where: HospitalRatingWhereUniqueInput!, create: HospitalRatingCreateInput!, update: HospitalRatingUpdateInput!): HospitalRating!
  deleteHospitalRating(where: HospitalRatingWhereUniqueInput!): HospitalRating
  deleteManyHospitalRatings(where: HospitalRatingWhereInput): BatchPayload!
  createIllness(data: IllnessCreateInput!): Illness!
  updateIllness(data: IllnessUpdateInput!, where: IllnessWhereUniqueInput!): Illness
  updateManyIllnesses(data: IllnessUpdateManyMutationInput!, where: IllnessWhereInput): BatchPayload!
  upsertIllness(where: IllnessWhereUniqueInput!, create: IllnessCreateInput!, update: IllnessUpdateInput!): Illness!
  deleteIllness(where: IllnessWhereUniqueInput!): Illness
  deleteManyIllnesses(where: IllnessWhereInput): BatchPayload!
  createInsurance(data: InsuranceCreateInput!): Insurance!
  updateInsurance(data: InsuranceUpdateInput!, where: InsuranceWhereUniqueInput!): Insurance
  updateManyInsurances(data: InsuranceUpdateManyMutationInput!, where: InsuranceWhereInput): BatchPayload!
  upsertInsurance(where: InsuranceWhereUniqueInput!, create: InsuranceCreateInput!, update: InsuranceUpdateInput!): Insurance!
  deleteInsurance(where: InsuranceWhereUniqueInput!): Insurance
  deleteManyInsurances(where: InsuranceWhereInput): BatchPayload!
  createInsuranceCategory(data: InsuranceCategoryCreateInput!): InsuranceCategory!
  updateInsuranceCategory(data: InsuranceCategoryUpdateInput!, where: InsuranceCategoryWhereUniqueInput!): InsuranceCategory
  updateManyInsuranceCategories(data: InsuranceCategoryUpdateManyMutationInput!, where: InsuranceCategoryWhereInput): BatchPayload!
  upsertInsuranceCategory(where: InsuranceCategoryWhereUniqueInput!, create: InsuranceCategoryCreateInput!, update: InsuranceCategoryUpdateInput!): InsuranceCategory!
  deleteInsuranceCategory(where: InsuranceCategoryWhereUniqueInput!): InsuranceCategory
  deleteManyInsuranceCategories(where: InsuranceCategoryWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createMigration(data: MigrationCreateInput!): Migration!
  updateMigration(data: MigrationUpdateInput!, where: MigrationWhereUniqueInput!): Migration
  updateManyMigrations(data: MigrationUpdateManyMutationInput!, where: MigrationWhereInput): BatchPayload!
  upsertMigration(where: MigrationWhereUniqueInput!, create: MigrationCreateInput!, update: MigrationUpdateInput!): Migration!
  deleteMigration(where: MigrationWhereUniqueInput!): Migration
  deleteManyMigrations(where: MigrationWhereInput): BatchPayload!
  createOffer(data: OfferCreateInput!): Offer!
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  updateManyOffers(data: OfferUpdateManyMutationInput!, where: OfferWhereInput): BatchPayload!
  upsertOffer(where: OfferWhereUniqueInput!, create: OfferCreateInput!, update: OfferUpdateInput!): Offer!
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteManyOffers(where: OfferWhereInput): BatchPayload!
  createOnlineAppointment(data: OnlineAppointmentCreateInput!): OnlineAppointment!
  updateOnlineAppointment(data: OnlineAppointmentUpdateInput!, where: OnlineAppointmentWhereUniqueInput!): OnlineAppointment
  updateManyOnlineAppointments(data: OnlineAppointmentUpdateManyMutationInput!, where: OnlineAppointmentWhereInput): BatchPayload!
  upsertOnlineAppointment(where: OnlineAppointmentWhereUniqueInput!, create: OnlineAppointmentCreateInput!, update: OnlineAppointmentUpdateInput!): OnlineAppointment!
  deleteOnlineAppointment(where: OnlineAppointmentWhereUniqueInput!): OnlineAppointment
  deleteManyOnlineAppointments(where: OnlineAppointmentWhereInput): BatchPayload!
  createOnlineDoctor(data: OnlineDoctorCreateInput!): OnlineDoctor!
  updateOnlineDoctor(data: OnlineDoctorUpdateInput!, where: OnlineDoctorWhereUniqueInput!): OnlineDoctor
  updateManyOnlineDoctors(data: OnlineDoctorUpdateManyMutationInput!, where: OnlineDoctorWhereInput): BatchPayload!
  upsertOnlineDoctor(where: OnlineDoctorWhereUniqueInput!, create: OnlineDoctorCreateInput!, update: OnlineDoctorUpdateInput!): OnlineDoctor!
  deleteOnlineDoctor(where: OnlineDoctorWhereUniqueInput!): OnlineDoctor
  deleteManyOnlineDoctors(where: OnlineDoctorWhereInput): BatchPayload!
  createOnlineRating(data: OnlineRatingCreateInput!): OnlineRating!
  updateOnlineRating(data: OnlineRatingUpdateInput!, where: OnlineRatingWhereUniqueInput!): OnlineRating
  updateManyOnlineRatings(data: OnlineRatingUpdateManyMutationInput!, where: OnlineRatingWhereInput): BatchPayload!
  upsertOnlineRating(where: OnlineRatingWhereUniqueInput!, create: OnlineRatingCreateInput!, update: OnlineRatingUpdateInput!): OnlineRating!
  deleteOnlineRating(where: OnlineRatingWhereUniqueInput!): OnlineRating
  deleteManyOnlineRatings(where: OnlineRatingWhereInput): BatchPayload!
  createOptTime(data: OptTimeCreateInput!): OptTime!
  updateOptTime(data: OptTimeUpdateInput!, where: OptTimeWhereUniqueInput!): OptTime
  updateManyOptTimes(data: OptTimeUpdateManyMutationInput!, where: OptTimeWhereInput): BatchPayload!
  upsertOptTime(where: OptTimeWhereUniqueInput!, create: OptTimeCreateInput!, update: OptTimeUpdateInput!): OptTime!
  deleteOptTime(where: OptTimeWhereUniqueInput!): OptTime
  deleteManyOptTimes(where: OptTimeWhereInput): BatchPayload!
  createPage(data: PageCreateInput!): Page!
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updateManyPages(data: PageUpdateManyMutationInput!, where: PageWhereInput): BatchPayload!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  deletePage(where: PageWhereUniqueInput!): Page
  deleteManyPages(where: PageWhereInput): BatchPayload!
  createPasswordReset(data: PasswordResetCreateInput!): PasswordReset!
  updatePasswordReset(data: PasswordResetUpdateInput!, where: PasswordResetWhereUniqueInput!): PasswordReset
  updateManyPasswordResets(data: PasswordResetUpdateManyMutationInput!, where: PasswordResetWhereInput): BatchPayload!
  upsertPasswordReset(where: PasswordResetWhereUniqueInput!, create: PasswordResetCreateInput!, update: PasswordResetUpdateInput!): PasswordReset!
  deletePasswordReset(where: PasswordResetWhereUniqueInput!): PasswordReset
  deleteManyPasswordResets(where: PasswordResetWhereInput): BatchPayload!
  createPatient(data: PatientCreateInput!): Patient!
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  updateManyPatients(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  upsertPatient(where: PatientWhereUniqueInput!, create: PatientCreateInput!, update: PatientUpdateInput!): Patient!
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deleteManyPatients(where: PatientWhereInput): BatchPayload!
  createPostImage(data: PostImageCreateInput!): PostImage!
  updatePostImage(data: PostImageUpdateInput!, where: PostImageWhereUniqueInput!): PostImage
  updateManyPostImages(data: PostImageUpdateManyMutationInput!, where: PostImageWhereInput): BatchPayload!
  upsertPostImage(where: PostImageWhereUniqueInput!, create: PostImageCreateInput!, update: PostImageUpdateInput!): PostImage!
  deletePostImage(where: PostImageWhereUniqueInput!): PostImage
  deleteManyPostImages(where: PostImageWhereInput): BatchPayload!
  createSearchDesign(data: SearchDesignCreateInput!): SearchDesign!
  updateSearchDesign(data: SearchDesignUpdateInput!, where: SearchDesignWhereUniqueInput!): SearchDesign
  updateManySearchDesigns(data: SearchDesignUpdateManyMutationInput!, where: SearchDesignWhereInput): BatchPayload!
  upsertSearchDesign(where: SearchDesignWhereUniqueInput!, create: SearchDesignCreateInput!, update: SearchDesignUpdateInput!): SearchDesign!
  deleteSearchDesign(where: SearchDesignWhereUniqueInput!): SearchDesign
  deleteManySearchDesigns(where: SearchDesignWhereInput): BatchPayload!
  createSheduleTime(data: SheduleTimeCreateInput!): SheduleTime!
  updateSheduleTime(data: SheduleTimeUpdateInput!, where: SheduleTimeWhereUniqueInput!): SheduleTime
  updateManySheduleTimes(data: SheduleTimeUpdateManyMutationInput!, where: SheduleTimeWhereInput): BatchPayload!
  upsertSheduleTime(where: SheduleTimeWhereUniqueInput!, create: SheduleTimeCreateInput!, update: SheduleTimeUpdateInput!): SheduleTime!
  deleteSheduleTime(where: SheduleTimeWhereUniqueInput!): SheduleTime
  deleteManySheduleTimes(where: SheduleTimeWhereInput): BatchPayload!
  createSlider(data: SliderCreateInput!): Slider!
  updateSlider(data: SliderUpdateInput!, where: SliderWhereUniqueInput!): Slider
  updateManySliders(data: SliderUpdateManyMutationInput!, where: SliderWhereInput): BatchPayload!
  upsertSlider(where: SliderWhereUniqueInput!, create: SliderCreateInput!, update: SliderUpdateInput!): Slider!
  deleteSlider(where: SliderWhereUniqueInput!): Slider
  deleteManySliders(where: SliderWhereInput): BatchPayload!
  createSpeciality(data: SpecialityCreateInput!): Speciality!
  updateSpeciality(data: SpecialityUpdateInput!, where: SpecialityWhereUniqueInput!): Speciality
  updateManySpecialities(data: SpecialityUpdateManyMutationInput!, where: SpecialityWhereInput): BatchPayload!
  upsertSpeciality(where: SpecialityWhereUniqueInput!, create: SpecialityCreateInput!, update: SpecialityUpdateInput!): Speciality!
  deleteSpeciality(where: SpecialityWhereUniqueInput!): Speciality
  deleteManySpecialities(where: SpecialityWhereInput): BatchPayload!
  createTranslation(data: TranslationCreateInput!): Translation!
  updateTranslation(data: TranslationUpdateInput!, where: TranslationWhereUniqueInput!): Translation
  updateManyTranslations(data: TranslationUpdateManyMutationInput!, where: TranslationWhereInput): BatchPayload!
  upsertTranslation(where: TranslationWhereUniqueInput!, create: TranslationCreateInput!, update: TranslationUpdateInput!): Translation!
  deleteTranslation(where: TranslationWhereUniqueInput!): Translation
  deleteManyTranslations(where: TranslationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVideoRequest(data: VideoRequestCreateInput!): VideoRequest!
  updateVideoRequest(data: VideoRequestUpdateInput!, where: VideoRequestWhereUniqueInput!): VideoRequest
  updateManyVideoRequests(data: VideoRequestUpdateManyMutationInput!, where: VideoRequestWhereInput): BatchPayload!
  upsertVideoRequest(where: VideoRequestWhereUniqueInput!, create: VideoRequestCreateInput!, update: VideoRequestUpdateInput!): VideoRequest!
  deleteVideoRequest(where: VideoRequestWhereUniqueInput!): VideoRequest
  deleteManyVideoRequests(where: VideoRequestWhereInput): BatchPayload!
  createVisitor(data: VisitorCreateInput!): Visitor!
  updateVisitor(data: VisitorUpdateInput!, where: VisitorWhereUniqueInput!): Visitor
  updateManyVisitors(data: VisitorUpdateManyMutationInput!, where: VisitorWhereInput): BatchPayload!
  upsertVisitor(where: VisitorWhereUniqueInput!, create: VisitorCreateInput!, update: VisitorUpdateInput!): Visitor!
  deleteVisitor(where: VisitorWhereUniqueInput!): Visitor
  deleteManyVisitors(where: VisitorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Offer {
  id: Int!
  description: String!
  descriptionArabic: String!
  endDate: DateTime!
  heading: String!
  headingArabic: String!
  hospitalId: Int!
  offerImage: String!
  position: Int!
  startDate: DateTime!
  status: Int!
  type: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OfferConnection {
  pageInfo: PageInfo!
  edges: [OfferEdge]!
  aggregate: AggregateOffer!
}

input OfferCreateInput {
  id: Int
  description: String!
  descriptionArabic: String!
  endDate: DateTime!
  heading: String!
  headingArabic: String!
  hospitalId: Int!
  offerImage: String!
  position: Int!
  startDate: DateTime!
  status: Int
  type: Int!
}

type OfferEdge {
  node: Offer!
  cursor: String!
}

enum OfferOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  descriptionArabic_ASC
  descriptionArabic_DESC
  endDate_ASC
  endDate_DESC
  heading_ASC
  heading_DESC
  headingArabic_ASC
  headingArabic_DESC
  hospitalId_ASC
  hospitalId_DESC
  offerImage_ASC
  offerImage_DESC
  position_ASC
  position_DESC
  startDate_ASC
  startDate_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OfferPreviousValues {
  id: Int!
  description: String!
  descriptionArabic: String!
  endDate: DateTime!
  heading: String!
  headingArabic: String!
  hospitalId: Int!
  offerImage: String!
  position: Int!
  startDate: DateTime!
  status: Int!
  type: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OfferSubscriptionPayload {
  mutation: MutationType!
  node: Offer
  updatedFields: [String!]
  previousValues: OfferPreviousValues
}

input OfferSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OfferWhereInput
  AND: [OfferSubscriptionWhereInput!]
  OR: [OfferSubscriptionWhereInput!]
  NOT: [OfferSubscriptionWhereInput!]
}

input OfferUpdateInput {
  description: String
  descriptionArabic: String
  endDate: DateTime
  heading: String
  headingArabic: String
  hospitalId: Int
  offerImage: String
  position: Int
  startDate: DateTime
  status: Int
  type: Int
}

input OfferUpdateManyMutationInput {
  description: String
  descriptionArabic: String
  endDate: DateTime
  heading: String
  headingArabic: String
  hospitalId: Int
  offerImage: String
  position: Int
  startDate: DateTime
  status: Int
  type: Int
}

input OfferWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  descriptionArabic: String
  descriptionArabic_not: String
  descriptionArabic_in: [String!]
  descriptionArabic_not_in: [String!]
  descriptionArabic_lt: String
  descriptionArabic_lte: String
  descriptionArabic_gt: String
  descriptionArabic_gte: String
  descriptionArabic_contains: String
  descriptionArabic_not_contains: String
  descriptionArabic_starts_with: String
  descriptionArabic_not_starts_with: String
  descriptionArabic_ends_with: String
  descriptionArabic_not_ends_with: String
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  heading: String
  heading_not: String
  heading_in: [String!]
  heading_not_in: [String!]
  heading_lt: String
  heading_lte: String
  heading_gt: String
  heading_gte: String
  heading_contains: String
  heading_not_contains: String
  heading_starts_with: String
  heading_not_starts_with: String
  heading_ends_with: String
  heading_not_ends_with: String
  headingArabic: String
  headingArabic_not: String
  headingArabic_in: [String!]
  headingArabic_not_in: [String!]
  headingArabic_lt: String
  headingArabic_lte: String
  headingArabic_gt: String
  headingArabic_gte: String
  headingArabic_contains: String
  headingArabic_not_contains: String
  headingArabic_starts_with: String
  headingArabic_not_starts_with: String
  headingArabic_ends_with: String
  headingArabic_not_ends_with: String
  hospitalId: Int
  hospitalId_not: Int
  hospitalId_in: [Int!]
  hospitalId_not_in: [Int!]
  hospitalId_lt: Int
  hospitalId_lte: Int
  hospitalId_gt: Int
  hospitalId_gte: Int
  offerImage: String
  offerImage_not: String
  offerImage_in: [String!]
  offerImage_not_in: [String!]
  offerImage_lt: String
  offerImage_lte: String
  offerImage_gt: String
  offerImage_gte: String
  offerImage_contains: String
  offerImage_not_contains: String
  offerImage_starts_with: String
  offerImage_not_starts_with: String
  offerImage_ends_with: String
  offerImage_not_ends_with: String
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OfferWhereInput!]
  OR: [OfferWhereInput!]
  NOT: [OfferWhereInput!]
}

input OfferWhereUniqueInput {
  id: Int
}

type OnlineAppointment {
  id: Int!
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  diseaseId: Int
  doctorArabic: String!
  doctorId: Int
  doctorName: String!
  dtId: Int
  gender: String!
  optId: Int
  patientId: Int
  phone: String!
  phoneCode: String
  scheduleTimeId: Int!
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OnlineAppointmentConnection {
  pageInfo: PageInfo!
  edges: [OnlineAppointmentEdge]!
  aggregate: AggregateOnlineAppointment!
}

input OnlineAppointmentCreateInput {
  id: Int
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  diseaseId: Int
  doctorArabic: String!
  doctorId: Int
  doctorName: String!
  dtId: Int
  gender: String!
  optId: Int
  patientId: Int
  phone: String!
  phoneCode: String
  scheduleTimeId: Int!
  status: Int
}

type OnlineAppointmentEdge {
  node: OnlineAppointment!
  cursor: String!
}

enum OnlineAppointmentOrderByInput {
  id_ASC
  id_DESC
  apointmentDate_ASC
  apointmentDate_DESC
  apointmentFulldate_ASC
  apointmentFulldate_DESC
  apointmentTime_ASC
  apointmentTime_DESC
  diseaseId_ASC
  diseaseId_DESC
  doctorArabic_ASC
  doctorArabic_DESC
  doctorId_ASC
  doctorId_DESC
  doctorName_ASC
  doctorName_DESC
  dtId_ASC
  dtId_DESC
  gender_ASC
  gender_DESC
  optId_ASC
  optId_DESC
  patientId_ASC
  patientId_DESC
  phone_ASC
  phone_DESC
  phoneCode_ASC
  phoneCode_DESC
  scheduleTimeId_ASC
  scheduleTimeId_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlineAppointmentPreviousValues {
  id: Int!
  apointmentDate: String!
  apointmentFulldate: Int!
  apointmentTime: String!
  diseaseId: Int
  doctorArabic: String!
  doctorId: Int
  doctorName: String!
  dtId: Int
  gender: String!
  optId: Int
  patientId: Int
  phone: String!
  phoneCode: String
  scheduleTimeId: Int!
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OnlineAppointmentSubscriptionPayload {
  mutation: MutationType!
  node: OnlineAppointment
  updatedFields: [String!]
  previousValues: OnlineAppointmentPreviousValues
}

input OnlineAppointmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlineAppointmentWhereInput
  AND: [OnlineAppointmentSubscriptionWhereInput!]
  OR: [OnlineAppointmentSubscriptionWhereInput!]
  NOT: [OnlineAppointmentSubscriptionWhereInput!]
}

input OnlineAppointmentUpdateInput {
  apointmentDate: String
  apointmentFulldate: Int
  apointmentTime: String
  diseaseId: Int
  doctorArabic: String
  doctorId: Int
  doctorName: String
  dtId: Int
  gender: String
  optId: Int
  patientId: Int
  phone: String
  phoneCode: String
  scheduleTimeId: Int
  status: Int
}

input OnlineAppointmentUpdateManyMutationInput {
  apointmentDate: String
  apointmentFulldate: Int
  apointmentTime: String
  diseaseId: Int
  doctorArabic: String
  doctorId: Int
  doctorName: String
  dtId: Int
  gender: String
  optId: Int
  patientId: Int
  phone: String
  phoneCode: String
  scheduleTimeId: Int
  status: Int
}

input OnlineAppointmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apointmentDate: String
  apointmentDate_not: String
  apointmentDate_in: [String!]
  apointmentDate_not_in: [String!]
  apointmentDate_lt: String
  apointmentDate_lte: String
  apointmentDate_gt: String
  apointmentDate_gte: String
  apointmentDate_contains: String
  apointmentDate_not_contains: String
  apointmentDate_starts_with: String
  apointmentDate_not_starts_with: String
  apointmentDate_ends_with: String
  apointmentDate_not_ends_with: String
  apointmentFulldate: Int
  apointmentFulldate_not: Int
  apointmentFulldate_in: [Int!]
  apointmentFulldate_not_in: [Int!]
  apointmentFulldate_lt: Int
  apointmentFulldate_lte: Int
  apointmentFulldate_gt: Int
  apointmentFulldate_gte: Int
  apointmentTime: String
  apointmentTime_not: String
  apointmentTime_in: [String!]
  apointmentTime_not_in: [String!]
  apointmentTime_lt: String
  apointmentTime_lte: String
  apointmentTime_gt: String
  apointmentTime_gte: String
  apointmentTime_contains: String
  apointmentTime_not_contains: String
  apointmentTime_starts_with: String
  apointmentTime_not_starts_with: String
  apointmentTime_ends_with: String
  apointmentTime_not_ends_with: String
  diseaseId: Int
  diseaseId_not: Int
  diseaseId_in: [Int!]
  diseaseId_not_in: [Int!]
  diseaseId_lt: Int
  diseaseId_lte: Int
  diseaseId_gt: Int
  diseaseId_gte: Int
  doctorArabic: String
  doctorArabic_not: String
  doctorArabic_in: [String!]
  doctorArabic_not_in: [String!]
  doctorArabic_lt: String
  doctorArabic_lte: String
  doctorArabic_gt: String
  doctorArabic_gte: String
  doctorArabic_contains: String
  doctorArabic_not_contains: String
  doctorArabic_starts_with: String
  doctorArabic_not_starts_with: String
  doctorArabic_ends_with: String
  doctorArabic_not_ends_with: String
  doctorId: Int
  doctorId_not: Int
  doctorId_in: [Int!]
  doctorId_not_in: [Int!]
  doctorId_lt: Int
  doctorId_lte: Int
  doctorId_gt: Int
  doctorId_gte: Int
  doctorName: String
  doctorName_not: String
  doctorName_in: [String!]
  doctorName_not_in: [String!]
  doctorName_lt: String
  doctorName_lte: String
  doctorName_gt: String
  doctorName_gte: String
  doctorName_contains: String
  doctorName_not_contains: String
  doctorName_starts_with: String
  doctorName_not_starts_with: String
  doctorName_ends_with: String
  doctorName_not_ends_with: String
  dtId: Int
  dtId_not: Int
  dtId_in: [Int!]
  dtId_not_in: [Int!]
  dtId_lt: Int
  dtId_lte: Int
  dtId_gt: Int
  dtId_gte: Int
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  optId: Int
  optId_not: Int
  optId_in: [Int!]
  optId_not_in: [Int!]
  optId_lt: Int
  optId_lte: Int
  optId_gt: Int
  optId_gte: Int
  patientId: Int
  patientId_not: Int
  patientId_in: [Int!]
  patientId_not_in: [Int!]
  patientId_lt: Int
  patientId_lte: Int
  patientId_gt: Int
  patientId_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phoneCode: String
  phoneCode_not: String
  phoneCode_in: [String!]
  phoneCode_not_in: [String!]
  phoneCode_lt: String
  phoneCode_lte: String
  phoneCode_gt: String
  phoneCode_gte: String
  phoneCode_contains: String
  phoneCode_not_contains: String
  phoneCode_starts_with: String
  phoneCode_not_starts_with: String
  phoneCode_ends_with: String
  phoneCode_not_ends_with: String
  scheduleTimeId: Int
  scheduleTimeId_not: Int
  scheduleTimeId_in: [Int!]
  scheduleTimeId_not_in: [Int!]
  scheduleTimeId_lt: Int
  scheduleTimeId_lte: Int
  scheduleTimeId_gt: Int
  scheduleTimeId_gte: Int
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OnlineAppointmentWhereInput!]
  OR: [OnlineAppointmentWhereInput!]
  NOT: [OnlineAppointmentWhereInput!]
}

input OnlineAppointmentWhereUniqueInput {
  id: Int
}

type OnlineDoctor {
  id: Int!
  apiKey: String!
  createdDate: DateTime!
  designation: String!
  doctorCv: String!
  email: String
  gender: String!
  lastSeen: DateTime!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String!
  phone: String
  picture: String
  specialityId: Int
  status: Int
}

type OnlineDoctorConnection {
  pageInfo: PageInfo!
  edges: [OnlineDoctorEdge]!
  aggregate: AggregateOnlineDoctor!
}

input OnlineDoctorCreateInput {
  id: Int
  apiKey: String!
  designation: String!
  doctorCv: String!
  email: String
  gender: String!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String
  phone: String
  picture: String
  specialityId: Int
  status: Int
}

type OnlineDoctorEdge {
  node: OnlineDoctor!
  cursor: String!
}

enum OnlineDoctorOrderByInput {
  id_ASC
  id_DESC
  apiKey_ASC
  apiKey_DESC
  createdDate_ASC
  createdDate_DESC
  designation_ASC
  designation_DESC
  doctorCv_ASC
  doctorCv_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  lastSeen_ASC
  lastSeen_DESC
  mohcard_ASC
  mohcard_DESC
  mohId_ASC
  mohId_DESC
  name_ASC
  name_DESC
  nameArabic_ASC
  nameArabic_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  picture_ASC
  picture_DESC
  specialityId_ASC
  specialityId_DESC
  status_ASC
  status_DESC
}

type OnlineDoctorPreviousValues {
  id: Int!
  apiKey: String!
  createdDate: DateTime!
  designation: String!
  doctorCv: String!
  email: String
  gender: String!
  lastSeen: DateTime!
  mohcard: String
  mohId: String!
  name: String
  nameArabic: String!
  password: String!
  phone: String
  picture: String
  specialityId: Int
  status: Int
}

type OnlineDoctorSubscriptionPayload {
  mutation: MutationType!
  node: OnlineDoctor
  updatedFields: [String!]
  previousValues: OnlineDoctorPreviousValues
}

input OnlineDoctorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlineDoctorWhereInput
  AND: [OnlineDoctorSubscriptionWhereInput!]
  OR: [OnlineDoctorSubscriptionWhereInput!]
  NOT: [OnlineDoctorSubscriptionWhereInput!]
}

input OnlineDoctorUpdateInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  picture: String
  specialityId: Int
  status: Int
}

input OnlineDoctorUpdateManyMutationInput {
  apiKey: String
  designation: String
  doctorCv: String
  email: String
  gender: String
  mohcard: String
  mohId: String
  name: String
  nameArabic: String
  password: String
  phone: String
  picture: String
  specialityId: Int
  status: Int
}

input OnlineDoctorWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  designation: String
  designation_not: String
  designation_in: [String!]
  designation_not_in: [String!]
  designation_lt: String
  designation_lte: String
  designation_gt: String
  designation_gte: String
  designation_contains: String
  designation_not_contains: String
  designation_starts_with: String
  designation_not_starts_with: String
  designation_ends_with: String
  designation_not_ends_with: String
  doctorCv: String
  doctorCv_not: String
  doctorCv_in: [String!]
  doctorCv_not_in: [String!]
  doctorCv_lt: String
  doctorCv_lte: String
  doctorCv_gt: String
  doctorCv_gte: String
  doctorCv_contains: String
  doctorCv_not_contains: String
  doctorCv_starts_with: String
  doctorCv_not_starts_with: String
  doctorCv_ends_with: String
  doctorCv_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  lastSeen: DateTime
  lastSeen_not: DateTime
  lastSeen_in: [DateTime!]
  lastSeen_not_in: [DateTime!]
  lastSeen_lt: DateTime
  lastSeen_lte: DateTime
  lastSeen_gt: DateTime
  lastSeen_gte: DateTime
  mohcard: String
  mohcard_not: String
  mohcard_in: [String!]
  mohcard_not_in: [String!]
  mohcard_lt: String
  mohcard_lte: String
  mohcard_gt: String
  mohcard_gte: String
  mohcard_contains: String
  mohcard_not_contains: String
  mohcard_starts_with: String
  mohcard_not_starts_with: String
  mohcard_ends_with: String
  mohcard_not_ends_with: String
  mohId: String
  mohId_not: String
  mohId_in: [String!]
  mohId_not_in: [String!]
  mohId_lt: String
  mohId_lte: String
  mohId_gt: String
  mohId_gte: String
  mohId_contains: String
  mohId_not_contains: String
  mohId_starts_with: String
  mohId_not_starts_with: String
  mohId_ends_with: String
  mohId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nameArabic: String
  nameArabic_not: String
  nameArabic_in: [String!]
  nameArabic_not_in: [String!]
  nameArabic_lt: String
  nameArabic_lte: String
  nameArabic_gt: String
  nameArabic_gte: String
  nameArabic_contains: String
  nameArabic_not_contains: String
  nameArabic_starts_with: String
  nameArabic_not_starts_with: String
  nameArabic_ends_with: String
  nameArabic_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  specialityId: Int
  specialityId_not: Int
  specialityId_in: [Int!]
  specialityId_not_in: [Int!]
  specialityId_lt: Int
  specialityId_lte: Int
  specialityId_gt: Int
  specialityId_gte: Int
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  AND: [OnlineDoctorWhereInput!]
  OR: [OnlineDoctorWhereInput!]
  NOT: [OnlineDoctorWhereInput!]
}

input OnlineDoctorWhereUniqueInput {
  id: Int
}

type OnlineRating {
  id: Int!
  doctorsId: Int
  rating: String
  systemIp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OnlineRatingConnection {
  pageInfo: PageInfo!
  edges: [OnlineRatingEdge]!
  aggregate: AggregateOnlineRating!
}

input OnlineRatingCreateInput {
  id: Int
  doctorsId: Int
  rating: String
  systemIp: String!
}

type OnlineRatingEdge {
  node: OnlineRating!
  cursor: String!
}

enum OnlineRatingOrderByInput {
  id_ASC
  id_DESC
  doctorsId_ASC
  doctorsId_DESC
  rating_ASC
  rating_DESC
  systemIp_ASC
  systemIp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlineRatingPreviousValues {
  id: Int!
  doctorsId: Int
  rating: String
  systemIp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OnlineRatingSubscriptionPayload {
  mutation: MutationType!
  node: OnlineRating
  updatedFields: [String!]
  previousValues: OnlineRatingPreviousValues
}

input OnlineRatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlineRatingWhereInput
  AND: [OnlineRatingSubscriptionWhereInput!]
  OR: [OnlineRatingSubscriptionWhereInput!]
  NOT: [OnlineRatingSubscriptionWhereInput!]
}

input OnlineRatingUpdateInput {
  doctorsId: Int
  rating: String
  systemIp: String
}

input OnlineRatingUpdateManyMutationInput {
  doctorsId: Int
  rating: String
  systemIp: String
}

input OnlineRatingWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  doctorsId: Int
  doctorsId_not: Int
  doctorsId_in: [Int!]
  doctorsId_not_in: [Int!]
  doctorsId_lt: Int
  doctorsId_lte: Int
  doctorsId_gt: Int
  doctorsId_gte: Int
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  systemIp: String
  systemIp_not: String
  systemIp_in: [String!]
  systemIp_not_in: [String!]
  systemIp_lt: String
  systemIp_lte: String
  systemIp_gt: String
  systemIp_gte: String
  systemIp_contains: String
  systemIp_not_contains: String
  systemIp_starts_with: String
  systemIp_not_starts_with: String
  systemIp_ends_with: String
  systemIp_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OnlineRatingWhereInput!]
  OR: [OnlineRatingWhereInput!]
  NOT: [OnlineRatingWhereInput!]
}

input OnlineRatingWhereUniqueInput {
  id: Int
}

type OptTime {
  id: Int!
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OptTimeConnection {
  pageInfo: PageInfo!
  edges: [OptTimeEdge]!
  aggregate: AggregateOptTime!
}

input OptTimeCreateInput {
  id: Int
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
}

input OptTimeCreateOneInput {
  create: OptTimeCreateInput
  connect: OptTimeWhereUniqueInput
}

type OptTimeEdge {
  node: OptTime!
  cursor: String!
}

enum OptTimeOrderByInput {
  id_ASC
  id_DESC
  fifteenMins_ASC
  fifteenMins_DESC
  thirtyMins_ASC
  thirtyMins_DESC
  twentyMins_ASC
  twentyMins_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptTimePreviousValues {
  id: Int!
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OptTimeSubscriptionPayload {
  mutation: MutationType!
  node: OptTime
  updatedFields: [String!]
  previousValues: OptTimePreviousValues
}

input OptTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptTimeWhereInput
  AND: [OptTimeSubscriptionWhereInput!]
  OR: [OptTimeSubscriptionWhereInput!]
  NOT: [OptTimeSubscriptionWhereInput!]
}

input OptTimeUpdateDataInput {
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
}

input OptTimeUpdateInput {
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
}

input OptTimeUpdateManyMutationInput {
  fifteenMins: String
  thirtyMins: String
  twentyMins: String
}

input OptTimeUpdateOneInput {
  create: OptTimeCreateInput
  update: OptTimeUpdateDataInput
  upsert: OptTimeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: OptTimeWhereUniqueInput
}

input OptTimeUpsertNestedInput {
  update: OptTimeUpdateDataInput!
  create: OptTimeCreateInput!
}

input OptTimeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  fifteenMins: String
  fifteenMins_not: String
  fifteenMins_in: [String!]
  fifteenMins_not_in: [String!]
  fifteenMins_lt: String
  fifteenMins_lte: String
  fifteenMins_gt: String
  fifteenMins_gte: String
  fifteenMins_contains: String
  fifteenMins_not_contains: String
  fifteenMins_starts_with: String
  fifteenMins_not_starts_with: String
  fifteenMins_ends_with: String
  fifteenMins_not_ends_with: String
  thirtyMins: String
  thirtyMins_not: String
  thirtyMins_in: [String!]
  thirtyMins_not_in: [String!]
  thirtyMins_lt: String
  thirtyMins_lte: String
  thirtyMins_gt: String
  thirtyMins_gte: String
  thirtyMins_contains: String
  thirtyMins_not_contains: String
  thirtyMins_starts_with: String
  thirtyMins_not_starts_with: String
  thirtyMins_ends_with: String
  thirtyMins_not_ends_with: String
  twentyMins: String
  twentyMins_not: String
  twentyMins_in: [String!]
  twentyMins_not_in: [String!]
  twentyMins_lt: String
  twentyMins_lte: String
  twentyMins_gt: String
  twentyMins_gte: String
  twentyMins_contains: String
  twentyMins_not_contains: String
  twentyMins_starts_with: String
  twentyMins_not_starts_with: String
  twentyMins_ends_with: String
  twentyMins_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptTimeWhereInput!]
  OR: [OptTimeWhereInput!]
  NOT: [OptTimeWhereInput!]
}

input OptTimeWhereUniqueInput {
  id: Int
}

type Page {
  id: Int!
  slug: String
  slug_ar: String
  title: String
  title_ar: String
  content: String
  content_ar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PageConnection {
  pageInfo: PageInfo!
  edges: [PageEdge]!
  aggregate: AggregatePage!
}

input PageCreateInput {
  id: Int
  slug: String
  slug_ar: String
  title: String
  title_ar: String
  content: String
  content_ar: String
}

type PageEdge {
  node: Page!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  slug_ar_ASC
  slug_ar_DESC
  title_ASC
  title_DESC
  title_ar_ASC
  title_ar_DESC
  content_ASC
  content_DESC
  content_ar_ASC
  content_ar_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PagePreviousValues {
  id: Int!
  slug: String
  slug_ar: String
  title: String
  title_ar: String
  content: String
  content_ar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PageSubscriptionPayload {
  mutation: MutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

input PageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PageWhereInput
  AND: [PageSubscriptionWhereInput!]
  OR: [PageSubscriptionWhereInput!]
  NOT: [PageSubscriptionWhereInput!]
}

input PageUpdateInput {
  slug: String
  slug_ar: String
  title: String
  title_ar: String
  content: String
  content_ar: String
}

input PageUpdateManyMutationInput {
  slug: String
  slug_ar: String
  title: String
  title_ar: String
  content: String
  content_ar: String
}

input PageWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  slug_ar: String
  slug_ar_not: String
  slug_ar_in: [String!]
  slug_ar_not_in: [String!]
  slug_ar_lt: String
  slug_ar_lte: String
  slug_ar_gt: String
  slug_ar_gte: String
  slug_ar_contains: String
  slug_ar_not_contains: String
  slug_ar_starts_with: String
  slug_ar_not_starts_with: String
  slug_ar_ends_with: String
  slug_ar_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_ar: String
  title_ar_not: String
  title_ar_in: [String!]
  title_ar_not_in: [String!]
  title_ar_lt: String
  title_ar_lte: String
  title_ar_gt: String
  title_ar_gte: String
  title_ar_contains: String
  title_ar_not_contains: String
  title_ar_starts_with: String
  title_ar_not_starts_with: String
  title_ar_ends_with: String
  title_ar_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  content_ar: String
  content_ar_not: String
  content_ar_in: [String!]
  content_ar_not_in: [String!]
  content_ar_lt: String
  content_ar_lte: String
  content_ar_gt: String
  content_ar_gte: String
  content_ar_contains: String
  content_ar_not_contains: String
  content_ar_starts_with: String
  content_ar_not_starts_with: String
  content_ar_ends_with: String
  content_ar_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
}

input PageWhereUniqueInput {
  id: Int
  slug: String
  slug_ar: String
}

type PasswordReset {
  id: Int!
  createdAt: DateTime!
  email: String!
  token: String!
  updatedAt: DateTime!
}

type PasswordResetConnection {
  pageInfo: PageInfo!
  edges: [PasswordResetEdge]!
  aggregate: AggregatePasswordReset!
}

input PasswordResetCreateInput {
  id: Int
  email: String!
  token: String!
}

type PasswordResetEdge {
  node: PasswordReset!
  cursor: String!
}

enum PasswordResetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PasswordResetPreviousValues {
  id: Int!
  createdAt: DateTime!
  email: String!
  token: String!
  updatedAt: DateTime!
}

type PasswordResetSubscriptionPayload {
  mutation: MutationType!
  node: PasswordReset
  updatedFields: [String!]
  previousValues: PasswordResetPreviousValues
}

input PasswordResetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PasswordResetWhereInput
  AND: [PasswordResetSubscriptionWhereInput!]
  OR: [PasswordResetSubscriptionWhereInput!]
  NOT: [PasswordResetSubscriptionWhereInput!]
}

input PasswordResetUpdateInput {
  email: String
  token: String
}

input PasswordResetUpdateManyMutationInput {
  email: String
  token: String
}

input PasswordResetWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PasswordResetWhereInput!]
  OR: [PasswordResetWhereInput!]
  NOT: [PasswordResetWhereInput!]
}

input PasswordResetWhereUniqueInput {
  id: Int
}

type Patient {
  id: Int!
  age: Int!
  apiKey: String!
  createdDate: DateTime!
  dob: String
  email: String
  gender: String
  lastAction: String!
  lastSeen: DateTime!
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int!
  uniqeId: String!
}

type PatientConnection {
  pageInfo: PageInfo!
  edges: [PatientEdge]!
  aggregate: AggregatePatient!
}

input PatientCreateInput {
  id: Int
  age: Int!
  apiKey: String!
  dob: String
  email: String
  gender: String
  lastAction: String!
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int
  uniqeId: String!
}

input PatientCreateOneInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
}

type PatientEdge {
  node: Patient!
  cursor: String!
}

enum PatientOrderByInput {
  id_ASC
  id_DESC
  age_ASC
  age_DESC
  apiKey_ASC
  apiKey_DESC
  createdDate_ASC
  createdDate_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  lastAction_ASC
  lastAction_DESC
  lastSeen_ASC
  lastSeen_DESC
  mailSubs_ASC
  mailSubs_DESC
  mobile_ASC
  mobile_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  status_ASC
  status_DESC
  uniqeId_ASC
  uniqeId_DESC
}

type PatientPreviousValues {
  id: Int!
  age: Int!
  apiKey: String!
  createdDate: DateTime!
  dob: String
  email: String
  gender: String
  lastAction: String!
  lastSeen: DateTime!
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int!
  uniqeId: String!
}

type PatientSubscriptionPayload {
  mutation: MutationType!
  node: Patient
  updatedFields: [String!]
  previousValues: PatientPreviousValues
}

input PatientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientWhereInput
  AND: [PatientSubscriptionWhereInput!]
  OR: [PatientSubscriptionWhereInput!]
  NOT: [PatientSubscriptionWhereInput!]
}

input PatientUpdateDataInput {
  age: Int
  apiKey: String
  dob: String
  email: String
  gender: String
  lastAction: String
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int
  uniqeId: String
}

input PatientUpdateInput {
  age: Int
  apiKey: String
  dob: String
  email: String
  gender: String
  lastAction: String
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int
  uniqeId: String
}

input PatientUpdateManyMutationInput {
  age: Int
  apiKey: String
  dob: String
  email: String
  gender: String
  lastAction: String
  mailSubs: Int
  mobile: String
  name: String
  password: String
  status: Int
  uniqeId: String
}

input PatientUpdateOneInput {
  create: PatientCreateInput
  update: PatientUpdateDataInput
  upsert: PatientUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientWhereUniqueInput
}

input PatientUpsertNestedInput {
  update: PatientUpdateDataInput!
  create: PatientCreateInput!
}

input PatientWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_lt: DateTime
  createdDate_lte: DateTime
  createdDate_gt: DateTime
  createdDate_gte: DateTime
  dob: String
  dob_not: String
  dob_in: [String!]
  dob_not_in: [String!]
  dob_lt: String
  dob_lte: String
  dob_gt: String
  dob_gte: String
  dob_contains: String
  dob_not_contains: String
  dob_starts_with: String
  dob_not_starts_with: String
  dob_ends_with: String
  dob_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  lastAction: String
  lastAction_not: String
  lastAction_in: [String!]
  lastAction_not_in: [String!]
  lastAction_lt: String
  lastAction_lte: String
  lastAction_gt: String
  lastAction_gte: String
  lastAction_contains: String
  lastAction_not_contains: String
  lastAction_starts_with: String
  lastAction_not_starts_with: String
  lastAction_ends_with: String
  lastAction_not_ends_with: String
  lastSeen: DateTime
  lastSeen_not: DateTime
  lastSeen_in: [DateTime!]
  lastSeen_not_in: [DateTime!]
  lastSeen_lt: DateTime
  lastSeen_lte: DateTime
  lastSeen_gt: DateTime
  lastSeen_gte: DateTime
  mailSubs: Int
  mailSubs_not: Int
  mailSubs_in: [Int!]
  mailSubs_not_in: [Int!]
  mailSubs_lt: Int
  mailSubs_lte: Int
  mailSubs_gt: Int
  mailSubs_gte: Int
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  uniqeId: String
  uniqeId_not: String
  uniqeId_in: [String!]
  uniqeId_not_in: [String!]
  uniqeId_lt: String
  uniqeId_lte: String
  uniqeId_gt: String
  uniqeId_gte: String
  uniqeId_contains: String
  uniqeId_not_contains: String
  uniqeId_starts_with: String
  uniqeId_not_starts_with: String
  uniqeId_ends_with: String
  uniqeId_not_ends_with: String
  AND: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  NOT: [PatientWhereInput!]
}

input PatientWhereUniqueInput {
  id: Int
}

type PostImage {
  id: Int!
  isDefault: Int!
  pic: String!
  postId: BlogPost
  createdAt: DateTime
  updatedAt: DateTime
}

type PostImageConnection {
  pageInfo: PageInfo!
  edges: [PostImageEdge]!
  aggregate: AggregatePostImage!
}

input PostImageCreateInput {
  id: Int
  isDefault: Int
  pic: String!
  postId: BlogPostCreateOneWithoutImagesInput
}

input PostImageCreateManyWithoutPostIdInput {
  create: [PostImageCreateWithoutPostIdInput!]
  connect: [PostImageWhereUniqueInput!]
}

input PostImageCreateWithoutPostIdInput {
  id: Int
  isDefault: Int
  pic: String!
}

type PostImageEdge {
  node: PostImage!
  cursor: String!
}

enum PostImageOrderByInput {
  id_ASC
  id_DESC
  isDefault_ASC
  isDefault_DESC
  pic_ASC
  pic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostImagePreviousValues {
  id: Int!
  isDefault: Int!
  pic: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PostImageScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  isDefault: Int
  isDefault_not: Int
  isDefault_in: [Int!]
  isDefault_not_in: [Int!]
  isDefault_lt: Int
  isDefault_lte: Int
  isDefault_gt: Int
  isDefault_gte: Int
  pic: String
  pic_not: String
  pic_in: [String!]
  pic_not_in: [String!]
  pic_lt: String
  pic_lte: String
  pic_gt: String
  pic_gte: String
  pic_contains: String
  pic_not_contains: String
  pic_starts_with: String
  pic_not_starts_with: String
  pic_ends_with: String
  pic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostImageScalarWhereInput!]
  OR: [PostImageScalarWhereInput!]
  NOT: [PostImageScalarWhereInput!]
}

type PostImageSubscriptionPayload {
  mutation: MutationType!
  node: PostImage
  updatedFields: [String!]
  previousValues: PostImagePreviousValues
}

input PostImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostImageWhereInput
  AND: [PostImageSubscriptionWhereInput!]
  OR: [PostImageSubscriptionWhereInput!]
  NOT: [PostImageSubscriptionWhereInput!]
}

input PostImageUpdateInput {
  isDefault: Int
  pic: String
  postId: BlogPostUpdateOneWithoutImagesInput
}

input PostImageUpdateManyDataInput {
  isDefault: Int
  pic: String
}

input PostImageUpdateManyMutationInput {
  isDefault: Int
  pic: String
}

input PostImageUpdateManyWithoutPostIdInput {
  create: [PostImageCreateWithoutPostIdInput!]
  delete: [PostImageWhereUniqueInput!]
  connect: [PostImageWhereUniqueInput!]
  set: [PostImageWhereUniqueInput!]
  disconnect: [PostImageWhereUniqueInput!]
  update: [PostImageUpdateWithWhereUniqueWithoutPostIdInput!]
  upsert: [PostImageUpsertWithWhereUniqueWithoutPostIdInput!]
  deleteMany: [PostImageScalarWhereInput!]
  updateMany: [PostImageUpdateManyWithWhereNestedInput!]
}

input PostImageUpdateManyWithWhereNestedInput {
  where: PostImageScalarWhereInput!
  data: PostImageUpdateManyDataInput!
}

input PostImageUpdateWithoutPostIdDataInput {
  isDefault: Int
  pic: String
}

input PostImageUpdateWithWhereUniqueWithoutPostIdInput {
  where: PostImageWhereUniqueInput!
  data: PostImageUpdateWithoutPostIdDataInput!
}

input PostImageUpsertWithWhereUniqueWithoutPostIdInput {
  where: PostImageWhereUniqueInput!
  update: PostImageUpdateWithoutPostIdDataInput!
  create: PostImageCreateWithoutPostIdInput!
}

input PostImageWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  isDefault: Int
  isDefault_not: Int
  isDefault_in: [Int!]
  isDefault_not_in: [Int!]
  isDefault_lt: Int
  isDefault_lte: Int
  isDefault_gt: Int
  isDefault_gte: Int
  pic: String
  pic_not: String
  pic_in: [String!]
  pic_not_in: [String!]
  pic_lt: String
  pic_lte: String
  pic_gt: String
  pic_gte: String
  pic_contains: String
  pic_not_contains: String
  pic_starts_with: String
  pic_not_starts_with: String
  pic_ends_with: String
  pic_not_ends_with: String
  postId: BlogPostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostImageWhereInput!]
  OR: [PostImageWhereInput!]
  NOT: [PostImageWhereInput!]
}

input PostImageWhereUniqueInput {
  id: Int
}

type Query {
  aboutUs(where: AboutUsWhereUniqueInput!): AboutUs
  aboutUses(where: AboutUsWhereInput, orderBy: AboutUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AboutUs]!
  aboutUsesConnection(where: AboutUsWhereInput, orderBy: AboutUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AboutUsConnection!
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment]!
  appointmentsConnection(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppointmentConnection!
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Blog]!
  blogsConnection(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogConnection!
  blogComment(where: BlogCommentWhereUniqueInput!): BlogComment
  blogComments(where: BlogCommentWhereInput, orderBy: BlogCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlogComment]!
  blogCommentsConnection(where: BlogCommentWhereInput, orderBy: BlogCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogCommentConnection!
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  blogPosts(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlogPost]!
  blogPostsConnection(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogPostConnection!
  city(where: CityWhereUniqueInput!): City
  cities(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [City]!
  citiesConnection(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CityConnection!
  contactUs(where: ContactUsWhereUniqueInput!): ContactUs
  contactUses(where: ContactUsWhereInput, orderBy: ContactUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactUs]!
  contactUsesConnection(where: ContactUsWhereInput, orderBy: ContactUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactUsConnection!
  country(where: CountryWhereUniqueInput!): Country
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  disease(where: DiseaseWhereUniqueInput!): Disease
  diseases(where: DiseaseWhereInput, orderBy: DiseaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Disease]!
  diseasesConnection(where: DiseaseWhereInput, orderBy: DiseaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiseaseConnection!
  diseaseCovered(where: DiseaseCoveredWhereUniqueInput!): DiseaseCovered
  diseaseCovereds(where: DiseaseCoveredWhereInput, orderBy: DiseaseCoveredOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiseaseCovered]!
  diseaseCoveredsConnection(where: DiseaseCoveredWhereInput, orderBy: DiseaseCoveredOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiseaseCoveredConnection!
  doctor(where: DoctorWhereUniqueInput!): Doctor
  doctors(where: DoctorWhereInput, orderBy: DoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doctor]!
  doctorsConnection(where: DoctorWhereInput, orderBy: DoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoctorConnection!
  doctorOld(where: DoctorOldWhereUniqueInput!): DoctorOld
  doctorOlds(where: DoctorOldWhereInput, orderBy: DoctorOldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DoctorOld]!
  doctorOldsConnection(where: DoctorOldWhereInput, orderBy: DoctorOldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoctorOldConnection!
  doctorShedule(where: DoctorSheduleWhereUniqueInput!): DoctorShedule
  doctorShedules(where: DoctorSheduleWhereInput, orderBy: DoctorSheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DoctorShedule]!
  doctorShedulesConnection(where: DoctorSheduleWhereInput, orderBy: DoctorSheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoctorSheduleConnection!
  doctorSheduleTime(where: DoctorSheduleTimeWhereUniqueInput!): DoctorSheduleTime
  doctorSheduleTimes(where: DoctorSheduleTimeWhereInput, orderBy: DoctorSheduleTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DoctorSheduleTime]!
  doctorSheduleTimesConnection(where: DoctorSheduleTimeWhereInput, orderBy: DoctorSheduleTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoctorSheduleTimeConnection!
  doctorsRating(where: DoctorsRatingWhereUniqueInput!): DoctorsRating
  doctorsRatings(where: DoctorsRatingWhereInput, orderBy: DoctorsRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DoctorsRating]!
  doctorsRatingsConnection(where: DoctorsRatingWhereInput, orderBy: DoctorsRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DoctorsRatingConnection!
  drShedule(where: DrSheduleWhereUniqueInput!): DrShedule
  drShedules(where: DrSheduleWhereInput, orderBy: DrSheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DrShedule]!
  drShedulesConnection(where: DrSheduleWhereInput, orderBy: DrSheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DrSheduleConnection!
  emailSubscription(where: EmailSubscriptionWhereUniqueInput!): EmailSubscription
  emailSubscriptions(where: EmailSubscriptionWhereInput, orderBy: EmailSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailSubscription]!
  emailSubscriptionsConnection(where: EmailSubscriptionWhereInput, orderBy: EmailSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailSubscriptionConnection!
  facility(where: FacilityWhereUniqueInput!): Facility
  facilities(where: FacilityWhereInput, orderBy: FacilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Facility]!
  facilitiesConnection(where: FacilityWhereInput, orderBy: FacilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FacilityConnection!
  hospital(where: HospitalWhereUniqueInput!): Hospital
  hospitals(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital]!
  hospitalsConnection(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HospitalConnection!
  hospitalFacility(where: HospitalFacilityWhereUniqueInput!): HospitalFacility
  hospitalFacilities(where: HospitalFacilityWhereInput, orderBy: HospitalFacilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HospitalFacility]!
  hospitalFacilitiesConnection(where: HospitalFacilityWhereInput, orderBy: HospitalFacilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HospitalFacilityConnection!
  hospitalRating(where: HospitalRatingWhereUniqueInput!): HospitalRating
  hospitalRatings(where: HospitalRatingWhereInput, orderBy: HospitalRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HospitalRating]!
  hospitalRatingsConnection(where: HospitalRatingWhereInput, orderBy: HospitalRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HospitalRatingConnection!
  illness(where: IllnessWhereUniqueInput!): Illness
  illnesses(where: IllnessWhereInput, orderBy: IllnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Illness]!
  illnessesConnection(where: IllnessWhereInput, orderBy: IllnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IllnessConnection!
  insurance(where: InsuranceWhereUniqueInput!): Insurance
  insurances(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Insurance]!
  insurancesConnection(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InsuranceConnection!
  insuranceCategory(where: InsuranceCategoryWhereUniqueInput!): InsuranceCategory
  insuranceCategories(where: InsuranceCategoryWhereInput, orderBy: InsuranceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InsuranceCategory]!
  insuranceCategoriesConnection(where: InsuranceCategoryWhereInput, orderBy: InsuranceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InsuranceCategoryConnection!
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  migration(where: MigrationWhereUniqueInput!): Migration
  migrations(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Migration]!
  migrationsConnection(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MigrationConnection!
  offer(where: OfferWhereUniqueInput!): Offer
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer]!
  offersConnection(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfferConnection!
  onlineAppointment(where: OnlineAppointmentWhereUniqueInput!): OnlineAppointment
  onlineAppointments(where: OnlineAppointmentWhereInput, orderBy: OnlineAppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlineAppointment]!
  onlineAppointmentsConnection(where: OnlineAppointmentWhereInput, orderBy: OnlineAppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlineAppointmentConnection!
  onlineDoctor(where: OnlineDoctorWhereUniqueInput!): OnlineDoctor
  onlineDoctors(where: OnlineDoctorWhereInput, orderBy: OnlineDoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlineDoctor]!
  onlineDoctorsConnection(where: OnlineDoctorWhereInput, orderBy: OnlineDoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlineDoctorConnection!
  onlineRating(where: OnlineRatingWhereUniqueInput!): OnlineRating
  onlineRatings(where: OnlineRatingWhereInput, orderBy: OnlineRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlineRating]!
  onlineRatingsConnection(where: OnlineRatingWhereInput, orderBy: OnlineRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlineRatingConnection!
  optTime(where: OptTimeWhereUniqueInput!): OptTime
  optTimes(where: OptTimeWhereInput, orderBy: OptTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptTime]!
  optTimesConnection(where: OptTimeWhereInput, orderBy: OptTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptTimeConnection!
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  passwordReset(where: PasswordResetWhereUniqueInput!): PasswordReset
  passwordResets(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordReset]!
  passwordResetsConnection(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PasswordResetConnection!
  patient(where: PatientWhereUniqueInput!): Patient
  patients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient]!
  patientsConnection(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientConnection!
  postImage(where: PostImageWhereUniqueInput!): PostImage
  postImages(where: PostImageWhereInput, orderBy: PostImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostImage]!
  postImagesConnection(where: PostImageWhereInput, orderBy: PostImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostImageConnection!
  searchDesign(where: SearchDesignWhereUniqueInput!): SearchDesign
  searchDesigns(where: SearchDesignWhereInput, orderBy: SearchDesignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SearchDesign]!
  searchDesignsConnection(where: SearchDesignWhereInput, orderBy: SearchDesignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SearchDesignConnection!
  sheduleTime(where: SheduleTimeWhereUniqueInput!): SheduleTime
  sheduleTimes(where: SheduleTimeWhereInput, orderBy: SheduleTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SheduleTime]!
  sheduleTimesConnection(where: SheduleTimeWhereInput, orderBy: SheduleTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SheduleTimeConnection!
  slider(where: SliderWhereUniqueInput!): Slider
  sliders(where: SliderWhereInput, orderBy: SliderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slider]!
  slidersConnection(where: SliderWhereInput, orderBy: SliderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SliderConnection!
  speciality(where: SpecialityWhereUniqueInput!): Speciality
  specialities(where: SpecialityWhereInput, orderBy: SpecialityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speciality]!
  specialitiesConnection(where: SpecialityWhereInput, orderBy: SpecialityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecialityConnection!
  translation(where: TranslationWhereUniqueInput!): Translation
  translations(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Translation]!
  translationsConnection(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TranslationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  videoRequest(where: VideoRequestWhereUniqueInput!): VideoRequest
  videoRequests(where: VideoRequestWhereInput, orderBy: VideoRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VideoRequest]!
  videoRequestsConnection(where: VideoRequestWhereInput, orderBy: VideoRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoRequestConnection!
  visitor(where: VisitorWhereUniqueInput!): Visitor
  visitors(where: VisitorWhereInput, orderBy: VisitorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visitor]!
  visitorsConnection(where: VisitorWhereInput, orderBy: VisitorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VisitorConnection!
  node(id: ID!): Node
}

type SearchDesign {
  id: Int!
  addressColor: String!
  addressFamily: String!
  addressStyle: String!
  designationColor: String!
  designationFamily: String!
  designationStyle: String!
  doctorColor: String!
  doctorFamily: String!
  doctorStyle: String!
  emailColor: String!
  emailFamily: String!
  emailStyle: String!
  nameColor: String!
  nameFamily: String!
  nameStyle: String!
  phoneColor: String!
  phoneFamily: String!
  phoneStyle: String!
  ratingColor: String!
  ratingFamily: String!
  ratingStyle: String!
  specialityColor: String!
  specialityFamily: String!
  specialityStyle: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SearchDesignConnection {
  pageInfo: PageInfo!
  edges: [SearchDesignEdge]!
  aggregate: AggregateSearchDesign!
}

input SearchDesignCreateInput {
  id: Int
  addressColor: String!
  addressFamily: String!
  addressStyle: String!
  designationColor: String!
  designationFamily: String!
  designationStyle: String!
  doctorColor: String!
  doctorFamily: String!
  doctorStyle: String!
  emailColor: String!
  emailFamily: String!
  emailStyle: String!
  nameColor: String!
  nameFamily: String!
  nameStyle: String!
  phoneColor: String!
  phoneFamily: String!
  phoneStyle: String!
  ratingColor: String!
  ratingFamily: String!
  ratingStyle: String!
  specialityColor: String!
  specialityFamily: String!
  specialityStyle: String!
}

type SearchDesignEdge {
  node: SearchDesign!
  cursor: String!
}

enum SearchDesignOrderByInput {
  id_ASC
  id_DESC
  addressColor_ASC
  addressColor_DESC
  addressFamily_ASC
  addressFamily_DESC
  addressStyle_ASC
  addressStyle_DESC
  designationColor_ASC
  designationColor_DESC
  designationFamily_ASC
  designationFamily_DESC
  designationStyle_ASC
  designationStyle_DESC
  doctorColor_ASC
  doctorColor_DESC
  doctorFamily_ASC
  doctorFamily_DESC
  doctorStyle_ASC
  doctorStyle_DESC
  emailColor_ASC
  emailColor_DESC
  emailFamily_ASC
  emailFamily_DESC
  emailStyle_ASC
  emailStyle_DESC
  nameColor_ASC
  nameColor_DESC
  nameFamily_ASC
  nameFamily_DESC
  nameStyle_ASC
  nameStyle_DESC
  phoneColor_ASC
  phoneColor_DESC
  phoneFamily_ASC
  phoneFamily_DESC
  phoneStyle_ASC
  phoneStyle_DESC
  ratingColor_ASC
  ratingColor_DESC
  ratingFamily_ASC
  ratingFamily_DESC
  ratingStyle_ASC
  ratingStyle_DESC
  specialityColor_ASC
  specialityColor_DESC
  specialityFamily_ASC
  specialityFamily_DESC
  specialityStyle_ASC
  specialityStyle_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SearchDesignPreviousValues {
  id: Int!
  addressColor: String!
  addressFamily: String!
  addressStyle: String!
  designationColor: String!
  designationFamily: String!
  designationStyle: String!
  doctorColor: String!
  doctorFamily: String!
  doctorStyle: String!
  emailColor: String!
  emailFamily: String!
  emailStyle: String!
  nameColor: String!
  nameFamily: String!
  nameStyle: String!
  phoneColor: String!
  phoneFamily: String!
  phoneStyle: String!
  ratingColor: String!
  ratingFamily: String!
  ratingStyle: String!
  specialityColor: String!
  specialityFamily: String!
  specialityStyle: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SearchDesignSubscriptionPayload {
  mutation: MutationType!
  node: SearchDesign
  updatedFields: [String!]
  previousValues: SearchDesignPreviousValues
}

input SearchDesignSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SearchDesignWhereInput
  AND: [SearchDesignSubscriptionWhereInput!]
  OR: [SearchDesignSubscriptionWhereInput!]
  NOT: [SearchDesignSubscriptionWhereInput!]
}

input SearchDesignUpdateInput {
  addressColor: String
  addressFamily: String
  addressStyle: String
  designationColor: String
  designationFamily: String
  designationStyle: String
  doctorColor: String
  doctorFamily: String
  doctorStyle: String
  emailColor: String
  emailFamily: String
  emailStyle: String
  nameColor: String
  nameFamily: String
  nameStyle: String
  phoneColor: String
  phoneFamily: String
  phoneStyle: String
  ratingColor: String
  ratingFamily: String
  ratingStyle: String
  specialityColor: String
  specialityFamily: String
  specialityStyle: String
}

input SearchDesignUpdateManyMutationInput {
  addressColor: String
  addressFamily: String
  addressStyle: String
  designationColor: String
  designationFamily: String
  designationStyle: String
  doctorColor: String
  doctorFamily: String
  doctorStyle: String
  emailColor: String
  emailFamily: String
  emailStyle: String
  nameColor: String
  nameFamily: String
  nameStyle: String
  phoneColor: String
  phoneFamily: String
  phoneStyle: String
  ratingColor: String
  ratingFamily: String
  ratingStyle: String
  specialityColor: String
  specialityFamily: String
  specialityStyle: String
}

input SearchDesignWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  addressColor: String
  addressColor_not: String
  addressColor_in: [String!]
  addressColor_not_in: [String!]
  addressColor_lt: String
  addressColor_lte: String
  addressColor_gt: String
  addressColor_gte: String
  addressColor_contains: String
  addressColor_not_contains: String
  addressColor_starts_with: String
  addressColor_not_starts_with: String
  addressColor_ends_with: String
  addressColor_not_ends_with: String
  addressFamily: String
  addressFamily_not: String
  addressFamily_in: [String!]
  addressFamily_not_in: [String!]
  addressFamily_lt: String
  addressFamily_lte: String
  addressFamily_gt: String
  addressFamily_gte: String
  addressFamily_contains: String
  addressFamily_not_contains: String
  addressFamily_starts_with: String
  addressFamily_not_starts_with: String
  addressFamily_ends_with: String
  addressFamily_not_ends_with: String
  addressStyle: String
  addressStyle_not: String
  addressStyle_in: [String!]
  addressStyle_not_in: [String!]
  addressStyle_lt: String
  addressStyle_lte: String
  addressStyle_gt: String
  addressStyle_gte: String
  addressStyle_contains: String
  addressStyle_not_contains: String
  addressStyle_starts_with: String
  addressStyle_not_starts_with: String
  addressStyle_ends_with: String
  addressStyle_not_ends_with: String
  designationColor: String
  designationColor_not: String
  designationColor_in: [String!]
  designationColor_not_in: [String!]
  designationColor_lt: String
  designationColor_lte: String
  designationColor_gt: String
  designationColor_gte: String
  designationColor_contains: String
  designationColor_not_contains: String
  designationColor_starts_with: String
  designationColor_not_starts_with: String
  designationColor_ends_with: String
  designationColor_not_ends_with: String
  designationFamily: String
  designationFamily_not: String
  designationFamily_in: [String!]
  designationFamily_not_in: [String!]
  designationFamily_lt: String
  designationFamily_lte: String
  designationFamily_gt: String
  designationFamily_gte: String
  designationFamily_contains: String
  designationFamily_not_contains: String
  designationFamily_starts_with: String
  designationFamily_not_starts_with: String
  designationFamily_ends_with: String
  designationFamily_not_ends_with: String
  designationStyle: String
  designationStyle_not: String
  designationStyle_in: [String!]
  designationStyle_not_in: [String!]
  designationStyle_lt: String
  designationStyle_lte: String
  designationStyle_gt: String
  designationStyle_gte: String
  designationStyle_contains: String
  designationStyle_not_contains: String
  designationStyle_starts_with: String
  designationStyle_not_starts_with: String
  designationStyle_ends_with: String
  designationStyle_not_ends_with: String
  doctorColor: String
  doctorColor_not: String
  doctorColor_in: [String!]
  doctorColor_not_in: [String!]
  doctorColor_lt: String
  doctorColor_lte: String
  doctorColor_gt: String
  doctorColor_gte: String
  doctorColor_contains: String
  doctorColor_not_contains: String
  doctorColor_starts_with: String
  doctorColor_not_starts_with: String
  doctorColor_ends_with: String
  doctorColor_not_ends_with: String
  doctorFamily: String
  doctorFamily_not: String
  doctorFamily_in: [String!]
  doctorFamily_not_in: [String!]
  doctorFamily_lt: String
  doctorFamily_lte: String
  doctorFamily_gt: String
  doctorFamily_gte: String
  doctorFamily_contains: String
  doctorFamily_not_contains: String
  doctorFamily_starts_with: String
  doctorFamily_not_starts_with: String
  doctorFamily_ends_with: String
  doctorFamily_not_ends_with: String
  doctorStyle: String
  doctorStyle_not: String
  doctorStyle_in: [String!]
  doctorStyle_not_in: [String!]
  doctorStyle_lt: String
  doctorStyle_lte: String
  doctorStyle_gt: String
  doctorStyle_gte: String
  doctorStyle_contains: String
  doctorStyle_not_contains: String
  doctorStyle_starts_with: String
  doctorStyle_not_starts_with: String
  doctorStyle_ends_with: String
  doctorStyle_not_ends_with: String
  emailColor: String
  emailColor_not: String
  emailColor_in: [String!]
  emailColor_not_in: [String!]
  emailColor_lt: String
  emailColor_lte: String
  emailColor_gt: String
  emailColor_gte: String
  emailColor_contains: String
  emailColor_not_contains: String
  emailColor_starts_with: String
  emailColor_not_starts_with: String
  emailColor_ends_with: String
  emailColor_not_ends_with: String
  emailFamily: String
  emailFamily_not: String
  emailFamily_in: [String!]
  emailFamily_not_in: [String!]
  emailFamily_lt: String
  emailFamily_lte: String
  emailFamily_gt: String
  emailFamily_gte: String
  emailFamily_contains: String
  emailFamily_not_contains: String
  emailFamily_starts_with: String
  emailFamily_not_starts_with: String
  emailFamily_ends_with: String
  emailFamily_not_ends_with: String
  emailStyle: String
  emailStyle_not: String
  emailStyle_in: [String!]
  emailStyle_not_in: [String!]
  emailStyle_lt: String
  emailStyle_lte: String
  emailStyle_gt: String
  emailStyle_gte: String
  emailStyle_contains: String
  emailStyle_not_contains: String
  emailStyle_starts_with: String
  emailStyle_not_starts_with: String
  emailStyle_ends_with: String
  emailStyle_not_ends_with: String
  nameColor: String
  nameColor_not: String
  nameColor_in: [String!]
  nameColor_not_in: [String!]
  nameColor_lt: String
  nameColor_lte: String
  nameColor_gt: String
  nameColor_gte: String
  nameColor_contains: String
  nameColor_not_contains: String
  nameColor_starts_with: String
  nameColor_not_starts_with: String
  nameColor_ends_with: String
  nameColor_not_ends_with: String
  nameFamily: String
  nameFamily_not: String
  nameFamily_in: [String!]
  nameFamily_not_in: [String!]
  nameFamily_lt: String
  nameFamily_lte: String
  nameFamily_gt: String
  nameFamily_gte: String
  nameFamily_contains: String
  nameFamily_not_contains: String
  nameFamily_starts_with: String
  nameFamily_not_starts_with: String
  nameFamily_ends_with: String
  nameFamily_not_ends_with: String
  nameStyle: String
  nameStyle_not: String
  nameStyle_in: [String!]
  nameStyle_not_in: [String!]
  nameStyle_lt: String
  nameStyle_lte: String
  nameStyle_gt: String
  nameStyle_gte: String
  nameStyle_contains: String
  nameStyle_not_contains: String
  nameStyle_starts_with: String
  nameStyle_not_starts_with: String
  nameStyle_ends_with: String
  nameStyle_not_ends_with: String
  phoneColor: String
  phoneColor_not: String
  phoneColor_in: [String!]
  phoneColor_not_in: [String!]
  phoneColor_lt: String
  phoneColor_lte: String
  phoneColor_gt: String
  phoneColor_gte: String
  phoneColor_contains: String
  phoneColor_not_contains: String
  phoneColor_starts_with: String
  phoneColor_not_starts_with: String
  phoneColor_ends_with: String
  phoneColor_not_ends_with: String
  phoneFamily: String
  phoneFamily_not: String
  phoneFamily_in: [String!]
  phoneFamily_not_in: [String!]
  phoneFamily_lt: String
  phoneFamily_lte: String
  phoneFamily_gt: String
  phoneFamily_gte: String
  phoneFamily_contains: String
  phoneFamily_not_contains: String
  phoneFamily_starts_with: String
  phoneFamily_not_starts_with: String
  phoneFamily_ends_with: String
  phoneFamily_not_ends_with: String
  phoneStyle: String
  phoneStyle_not: String
  phoneStyle_in: [String!]
  phoneStyle_not_in: [String!]
  phoneStyle_lt: String
  phoneStyle_lte: String
  phoneStyle_gt: String
  phoneStyle_gte: String
  phoneStyle_contains: String
  phoneStyle_not_contains: String
  phoneStyle_starts_with: String
  phoneStyle_not_starts_with: String
  phoneStyle_ends_with: String
  phoneStyle_not_ends_with: String
  ratingColor: String
  ratingColor_not: String
  ratingColor_in: [String!]
  ratingColor_not_in: [String!]
  ratingColor_lt: String
  ratingColor_lte: String
  ratingColor_gt: String
  ratingColor_gte: String
  ratingColor_contains: String
  ratingColor_not_contains: String
  ratingColor_starts_with: String
  ratingColor_not_starts_with: String
  ratingColor_ends_with: String
  ratingColor_not_ends_with: String
  ratingFamily: String
  ratingFamily_not: String
  ratingFamily_in: [String!]
  ratingFamily_not_in: [String!]
  ratingFamily_lt: String
  ratingFamily_lte: String
  ratingFamily_gt: String
  ratingFamily_gte: String
  ratingFamily_contains: String
  ratingFamily_not_contains: String
  ratingFamily_starts_with: String
  ratingFamily_not_starts_with: String
  ratingFamily_ends_with: String
  ratingFamily_not_ends_with: String
  ratingStyle: String
  ratingStyle_not: String
  ratingStyle_in: [String!]
  ratingStyle_not_in: [String!]
  ratingStyle_lt: String
  ratingStyle_lte: String
  ratingStyle_gt: String
  ratingStyle_gte: String
  ratingStyle_contains: String
  ratingStyle_not_contains: String
  ratingStyle_starts_with: String
  ratingStyle_not_starts_with: String
  ratingStyle_ends_with: String
  ratingStyle_not_ends_with: String
  specialityColor: String
  specialityColor_not: String
  specialityColor_in: [String!]
  specialityColor_not_in: [String!]
  specialityColor_lt: String
  specialityColor_lte: String
  specialityColor_gt: String
  specialityColor_gte: String
  specialityColor_contains: String
  specialityColor_not_contains: String
  specialityColor_starts_with: String
  specialityColor_not_starts_with: String
  specialityColor_ends_with: String
  specialityColor_not_ends_with: String
  specialityFamily: String
  specialityFamily_not: String
  specialityFamily_in: [String!]
  specialityFamily_not_in: [String!]
  specialityFamily_lt: String
  specialityFamily_lte: String
  specialityFamily_gt: String
  specialityFamily_gte: String
  specialityFamily_contains: String
  specialityFamily_not_contains: String
  specialityFamily_starts_with: String
  specialityFamily_not_starts_with: String
  specialityFamily_ends_with: String
  specialityFamily_not_ends_with: String
  specialityStyle: String
  specialityStyle_not: String
  specialityStyle_in: [String!]
  specialityStyle_not_in: [String!]
  specialityStyle_lt: String
  specialityStyle_lte: String
  specialityStyle_gt: String
  specialityStyle_gte: String
  specialityStyle_contains: String
  specialityStyle_not_contains: String
  specialityStyle_starts_with: String
  specialityStyle_not_starts_with: String
  specialityStyle_ends_with: String
  specialityStyle_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SearchDesignWhereInput!]
  OR: [SearchDesignWhereInput!]
  NOT: [SearchDesignWhereInput!]
}

input SearchDesignWhereUniqueInput {
  id: Int
}

type SheduleTime {
  id: Int!
  drSheduleId: Int
  scheduleFullDate: Int!
  sheduleTime: String
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SheduleTimeConnection {
  pageInfo: PageInfo!
  edges: [SheduleTimeEdge]!
  aggregate: AggregateSheduleTime!
}

input SheduleTimeCreateInput {
  id: Int
  drSheduleId: Int
  scheduleFullDate: Int!
  sheduleTime: String
  status: Int
}

input SheduleTimeCreateOneInput {
  create: SheduleTimeCreateInput
  connect: SheduleTimeWhereUniqueInput
}

type SheduleTimeEdge {
  node: SheduleTime!
  cursor: String!
}

enum SheduleTimeOrderByInput {
  id_ASC
  id_DESC
  drSheduleId_ASC
  drSheduleId_DESC
  scheduleFullDate_ASC
  scheduleFullDate_DESC
  sheduleTime_ASC
  sheduleTime_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SheduleTimePreviousValues {
  id: Int!
  drSheduleId: Int
  scheduleFullDate: Int!
  sheduleTime: String
  status: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SheduleTimeSubscriptionPayload {
  mutation: MutationType!
  node: SheduleTime
  updatedFields: [String!]
  previousValues: SheduleTimePreviousValues
}

input SheduleTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SheduleTimeWhereInput
  AND: [SheduleTimeSubscriptionWhereInput!]
  OR: [SheduleTimeSubscriptionWhereInput!]
  NOT: [SheduleTimeSubscriptionWhereInput!]
}

input SheduleTimeUpdateDataInput {
  drSheduleId: Int
  scheduleFullDate: Int
  sheduleTime: String
  status: Int
}

input SheduleTimeUpdateInput {
  drSheduleId: Int
  scheduleFullDate: Int
  sheduleTime: String
  status: Int
}

input SheduleTimeUpdateManyMutationInput {
  drSheduleId: Int
  scheduleFullDate: Int
  sheduleTime: String
  status: Int
}

input SheduleTimeUpdateOneInput {
  create: SheduleTimeCreateInput
  update: SheduleTimeUpdateDataInput
  upsert: SheduleTimeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SheduleTimeWhereUniqueInput
}

input SheduleTimeUpsertNestedInput {
  update: SheduleTimeUpdateDataInput!
  create: SheduleTimeCreateInput!
}

input SheduleTimeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  drSheduleId: Int
  drSheduleId_not: Int
  drSheduleId_in: [Int!]
  drSheduleId_not_in: [Int!]
  drSheduleId_lt: Int
  drSheduleId_lte: Int
  drSheduleId_gt: Int
  drSheduleId_gte: Int
  scheduleFullDate: Int
  scheduleFullDate_not: Int
  scheduleFullDate_in: [Int!]
  scheduleFullDate_not_in: [Int!]
  scheduleFullDate_lt: Int
  scheduleFullDate_lte: Int
  scheduleFullDate_gt: Int
  scheduleFullDate_gte: Int
  sheduleTime: String
  sheduleTime_not: String
  sheduleTime_in: [String!]
  sheduleTime_not_in: [String!]
  sheduleTime_lt: String
  sheduleTime_lte: String
  sheduleTime_gt: String
  sheduleTime_gte: String
  sheduleTime_contains: String
  sheduleTime_not_contains: String
  sheduleTime_starts_with: String
  sheduleTime_not_starts_with: String
  sheduleTime_ends_with: String
  sheduleTime_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SheduleTimeWhereInput!]
  OR: [SheduleTimeWhereInput!]
  NOT: [SheduleTimeWhereInput!]
}

input SheduleTimeWhereUniqueInput {
  id: Int
}

type Slider {
  id: Int!
  arabicHeading: String!
  banner: String!
  heading: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SliderConnection {
  pageInfo: PageInfo!
  edges: [SliderEdge]!
  aggregate: AggregateSlider!
}

input SliderCreateInput {
  id: Int
  arabicHeading: String!
  banner: String!
  heading: String!
}

type SliderEdge {
  node: Slider!
  cursor: String!
}

enum SliderOrderByInput {
  id_ASC
  id_DESC
  arabicHeading_ASC
  arabicHeading_DESC
  banner_ASC
  banner_DESC
  heading_ASC
  heading_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SliderPreviousValues {
  id: Int!
  arabicHeading: String!
  banner: String!
  heading: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SliderSubscriptionPayload {
  mutation: MutationType!
  node: Slider
  updatedFields: [String!]
  previousValues: SliderPreviousValues
}

input SliderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SliderWhereInput
  AND: [SliderSubscriptionWhereInput!]
  OR: [SliderSubscriptionWhereInput!]
  NOT: [SliderSubscriptionWhereInput!]
}

input SliderUpdateInput {
  arabicHeading: String
  banner: String
  heading: String
}

input SliderUpdateManyMutationInput {
  arabicHeading: String
  banner: String
  heading: String
}

input SliderWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  arabicHeading: String
  arabicHeading_not: String
  arabicHeading_in: [String!]
  arabicHeading_not_in: [String!]
  arabicHeading_lt: String
  arabicHeading_lte: String
  arabicHeading_gt: String
  arabicHeading_gte: String
  arabicHeading_contains: String
  arabicHeading_not_contains: String
  arabicHeading_starts_with: String
  arabicHeading_not_starts_with: String
  arabicHeading_ends_with: String
  arabicHeading_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  heading: String
  heading_not: String
  heading_in: [String!]
  heading_not_in: [String!]
  heading_lt: String
  heading_lte: String
  heading_gt: String
  heading_gte: String
  heading_contains: String
  heading_not_contains: String
  heading_starts_with: String
  heading_not_starts_with: String
  heading_ends_with: String
  heading_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SliderWhereInput!]
  OR: [SliderWhereInput!]
  NOT: [SliderWhereInput!]
}

input SliderWhereUniqueInput {
  id: Int
}

type Speciality {
  id: Int!
  doctors(where: DoctorWhereInput, orderBy: DoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doctor!]
  speciality: String
  specialityArabic: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SpecialityConnection {
  pageInfo: PageInfo!
  edges: [SpecialityEdge]!
  aggregate: AggregateSpeciality!
}

input SpecialityCreateInput {
  id: Int
  doctors: DoctorCreateManyWithoutSpecialitiesInput
  speciality: String
  specialityArabic: String
}

input SpecialityCreateOneInput {
  create: SpecialityCreateInput
  connect: SpecialityWhereUniqueInput
}

input SpecialityCreateOneWithoutDoctorsInput {
  create: SpecialityCreateWithoutDoctorsInput
  connect: SpecialityWhereUniqueInput
}

input SpecialityCreateWithoutDoctorsInput {
  id: Int
  speciality: String
  specialityArabic: String
}

type SpecialityEdge {
  node: Speciality!
  cursor: String!
}

enum SpecialityOrderByInput {
  id_ASC
  id_DESC
  speciality_ASC
  speciality_DESC
  specialityArabic_ASC
  specialityArabic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SpecialityPreviousValues {
  id: Int!
  speciality: String
  specialityArabic: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SpecialitySubscriptionPayload {
  mutation: MutationType!
  node: Speciality
  updatedFields: [String!]
  previousValues: SpecialityPreviousValues
}

input SpecialitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpecialityWhereInput
  AND: [SpecialitySubscriptionWhereInput!]
  OR: [SpecialitySubscriptionWhereInput!]
  NOT: [SpecialitySubscriptionWhereInput!]
}

input SpecialityUpdateDataInput {
  doctors: DoctorUpdateManyWithoutSpecialitiesInput
  speciality: String
  specialityArabic: String
}

input SpecialityUpdateInput {
  doctors: DoctorUpdateManyWithoutSpecialitiesInput
  speciality: String
  specialityArabic: String
}

input SpecialityUpdateManyMutationInput {
  speciality: String
  specialityArabic: String
}

input SpecialityUpdateOneInput {
  create: SpecialityCreateInput
  update: SpecialityUpdateDataInput
  upsert: SpecialityUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SpecialityWhereUniqueInput
}

input SpecialityUpdateOneWithoutDoctorsInput {
  create: SpecialityCreateWithoutDoctorsInput
  update: SpecialityUpdateWithoutDoctorsDataInput
  upsert: SpecialityUpsertWithoutDoctorsInput
  delete: Boolean
  disconnect: Boolean
  connect: SpecialityWhereUniqueInput
}

input SpecialityUpdateWithoutDoctorsDataInput {
  speciality: String
  specialityArabic: String
}

input SpecialityUpsertNestedInput {
  update: SpecialityUpdateDataInput!
  create: SpecialityCreateInput!
}

input SpecialityUpsertWithoutDoctorsInput {
  update: SpecialityUpdateWithoutDoctorsDataInput!
  create: SpecialityCreateWithoutDoctorsInput!
}

input SpecialityWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  doctors_every: DoctorWhereInput
  doctors_some: DoctorWhereInput
  doctors_none: DoctorWhereInput
  speciality: String
  speciality_not: String
  speciality_in: [String!]
  speciality_not_in: [String!]
  speciality_lt: String
  speciality_lte: String
  speciality_gt: String
  speciality_gte: String
  speciality_contains: String
  speciality_not_contains: String
  speciality_starts_with: String
  speciality_not_starts_with: String
  speciality_ends_with: String
  speciality_not_ends_with: String
  specialityArabic: String
  specialityArabic_not: String
  specialityArabic_in: [String!]
  specialityArabic_not_in: [String!]
  specialityArabic_lt: String
  specialityArabic_lte: String
  specialityArabic_gt: String
  specialityArabic_gte: String
  specialityArabic_contains: String
  specialityArabic_not_contains: String
  specialityArabic_starts_with: String
  specialityArabic_not_starts_with: String
  specialityArabic_ends_with: String
  specialityArabic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SpecialityWhereInput!]
  OR: [SpecialityWhereInput!]
  NOT: [SpecialityWhereInput!]
}

input SpecialityWhereUniqueInput {
  id: Int
}

type Subscription {
  aboutUs(where: AboutUsSubscriptionWhereInput): AboutUsSubscriptionPayload
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  appointment(where: AppointmentSubscriptionWhereInput): AppointmentSubscriptionPayload
  blog(where: BlogSubscriptionWhereInput): BlogSubscriptionPayload
  blogComment(where: BlogCommentSubscriptionWhereInput): BlogCommentSubscriptionPayload
  blogPost(where: BlogPostSubscriptionWhereInput): BlogPostSubscriptionPayload
  city(where: CitySubscriptionWhereInput): CitySubscriptionPayload
  contactUs(where: ContactUsSubscriptionWhereInput): ContactUsSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  disease(where: DiseaseSubscriptionWhereInput): DiseaseSubscriptionPayload
  diseaseCovered(where: DiseaseCoveredSubscriptionWhereInput): DiseaseCoveredSubscriptionPayload
  doctor(where: DoctorSubscriptionWhereInput): DoctorSubscriptionPayload
  doctorOld(where: DoctorOldSubscriptionWhereInput): DoctorOldSubscriptionPayload
  doctorShedule(where: DoctorSheduleSubscriptionWhereInput): DoctorSheduleSubscriptionPayload
  doctorSheduleTime(where: DoctorSheduleTimeSubscriptionWhereInput): DoctorSheduleTimeSubscriptionPayload
  doctorsRating(where: DoctorsRatingSubscriptionWhereInput): DoctorsRatingSubscriptionPayload
  drShedule(where: DrSheduleSubscriptionWhereInput): DrSheduleSubscriptionPayload
  emailSubscription(where: EmailSubscriptionSubscriptionWhereInput): EmailSubscriptionSubscriptionPayload
  facility(where: FacilitySubscriptionWhereInput): FacilitySubscriptionPayload
  hospital(where: HospitalSubscriptionWhereInput): HospitalSubscriptionPayload
  hospitalFacility(where: HospitalFacilitySubscriptionWhereInput): HospitalFacilitySubscriptionPayload
  hospitalRating(where: HospitalRatingSubscriptionWhereInput): HospitalRatingSubscriptionPayload
  illness(where: IllnessSubscriptionWhereInput): IllnessSubscriptionPayload
  insurance(where: InsuranceSubscriptionWhereInput): InsuranceSubscriptionPayload
  insuranceCategory(where: InsuranceCategorySubscriptionWhereInput): InsuranceCategorySubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  migration(where: MigrationSubscriptionWhereInput): MigrationSubscriptionPayload
  offer(where: OfferSubscriptionWhereInput): OfferSubscriptionPayload
  onlineAppointment(where: OnlineAppointmentSubscriptionWhereInput): OnlineAppointmentSubscriptionPayload
  onlineDoctor(where: OnlineDoctorSubscriptionWhereInput): OnlineDoctorSubscriptionPayload
  onlineRating(where: OnlineRatingSubscriptionWhereInput): OnlineRatingSubscriptionPayload
  optTime(where: OptTimeSubscriptionWhereInput): OptTimeSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  passwordReset(where: PasswordResetSubscriptionWhereInput): PasswordResetSubscriptionPayload
  patient(where: PatientSubscriptionWhereInput): PatientSubscriptionPayload
  postImage(where: PostImageSubscriptionWhereInput): PostImageSubscriptionPayload
  searchDesign(where: SearchDesignSubscriptionWhereInput): SearchDesignSubscriptionPayload
  sheduleTime(where: SheduleTimeSubscriptionWhereInput): SheduleTimeSubscriptionPayload
  slider(where: SliderSubscriptionWhereInput): SliderSubscriptionPayload
  speciality(where: SpecialitySubscriptionWhereInput): SpecialitySubscriptionPayload
  translation(where: TranslationSubscriptionWhereInput): TranslationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  videoRequest(where: VideoRequestSubscriptionWhereInput): VideoRequestSubscriptionPayload
  visitor(where: VisitorSubscriptionWhereInput): VisitorSubscriptionPayload
}

type Translation {
  id: Int!
  arabi: String!
  english: String!
  index: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TranslationConnection {
  pageInfo: PageInfo!
  edges: [TranslationEdge]!
  aggregate: AggregateTranslation!
}

input TranslationCreateInput {
  id: Int
  arabi: String!
  english: String!
  index: String!
}

type TranslationEdge {
  node: Translation!
  cursor: String!
}

enum TranslationOrderByInput {
  id_ASC
  id_DESC
  arabi_ASC
  arabi_DESC
  english_ASC
  english_DESC
  index_ASC
  index_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TranslationPreviousValues {
  id: Int!
  arabi: String!
  english: String!
  index: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TranslationSubscriptionPayload {
  mutation: MutationType!
  node: Translation
  updatedFields: [String!]
  previousValues: TranslationPreviousValues
}

input TranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TranslationWhereInput
  AND: [TranslationSubscriptionWhereInput!]
  OR: [TranslationSubscriptionWhereInput!]
  NOT: [TranslationSubscriptionWhereInput!]
}

input TranslationUpdateInput {
  arabi: String
  english: String
  index: String
}

input TranslationUpdateManyMutationInput {
  arabi: String
  english: String
  index: String
}

input TranslationWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  arabi: String
  arabi_not: String
  arabi_in: [String!]
  arabi_not_in: [String!]
  arabi_lt: String
  arabi_lte: String
  arabi_gt: String
  arabi_gte: String
  arabi_contains: String
  arabi_not_contains: String
  arabi_starts_with: String
  arabi_not_starts_with: String
  arabi_ends_with: String
  arabi_not_ends_with: String
  english: String
  english_not: String
  english_in: [String!]
  english_not_in: [String!]
  english_lt: String
  english_lte: String
  english_gt: String
  english_gte: String
  english_contains: String
  english_not_contains: String
  english_starts_with: String
  english_not_starts_with: String
  english_ends_with: String
  english_not_ends_with: String
  index: String
  index_not: String
  index_in: [String!]
  index_not_in: [String!]
  index_lt: String
  index_lte: String
  index_gt: String
  index_gte: String
  index_contains: String
  index_not_contains: String
  index_starts_with: String
  index_not_starts_with: String
  index_ends_with: String
  index_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TranslationWhereInput!]
  OR: [TranslationWhereInput!]
  NOT: [TranslationWhereInput!]
}

input TranslationWhereUniqueInput {
  id: Int
}

type User {
  id: Int!
  createdAt: DateTime!
  email: String!
  name: String!
  password: String!
  rememberToken: String
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: Int
  email: String!
  name: String!
  password: String!
  rememberToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  rememberToken_ASC
  rememberToken_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: Int!
  createdAt: DateTime!
  email: String!
  name: String!
  password: String!
  rememberToken: String
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  rememberToken: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  rememberToken: String
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rememberToken: String
  rememberToken_not: String
  rememberToken_in: [String!]
  rememberToken_not_in: [String!]
  rememberToken_lt: String
  rememberToken_lte: String
  rememberToken_gt: String
  rememberToken_gte: String
  rememberToken_contains: String
  rememberToken_not_contains: String
  rememberToken_starts_with: String
  rememberToken_not_starts_with: String
  rememberToken_ends_with: String
  rememberToken_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

type VideoRequest {
  id: Int!
  doctorId: Int!
  joinCall: Int!
  patientId: Int!
  requestDate: Int!
  videoCode: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VideoRequestConnection {
  pageInfo: PageInfo!
  edges: [VideoRequestEdge]!
  aggregate: AggregateVideoRequest!
}

input VideoRequestCreateInput {
  id: Int
  doctorId: Int!
  joinCall: Int
  patientId: Int!
  requestDate: Int!
  videoCode: Int
}

type VideoRequestEdge {
  node: VideoRequest!
  cursor: String!
}

enum VideoRequestOrderByInput {
  id_ASC
  id_DESC
  doctorId_ASC
  doctorId_DESC
  joinCall_ASC
  joinCall_DESC
  patientId_ASC
  patientId_DESC
  requestDate_ASC
  requestDate_DESC
  videoCode_ASC
  videoCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VideoRequestPreviousValues {
  id: Int!
  doctorId: Int!
  joinCall: Int!
  patientId: Int!
  requestDate: Int!
  videoCode: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VideoRequestSubscriptionPayload {
  mutation: MutationType!
  node: VideoRequest
  updatedFields: [String!]
  previousValues: VideoRequestPreviousValues
}

input VideoRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoRequestWhereInput
  AND: [VideoRequestSubscriptionWhereInput!]
  OR: [VideoRequestSubscriptionWhereInput!]
  NOT: [VideoRequestSubscriptionWhereInput!]
}

input VideoRequestUpdateInput {
  doctorId: Int
  joinCall: Int
  patientId: Int
  requestDate: Int
  videoCode: Int
}

input VideoRequestUpdateManyMutationInput {
  doctorId: Int
  joinCall: Int
  patientId: Int
  requestDate: Int
  videoCode: Int
}

input VideoRequestWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  doctorId: Int
  doctorId_not: Int
  doctorId_in: [Int!]
  doctorId_not_in: [Int!]
  doctorId_lt: Int
  doctorId_lte: Int
  doctorId_gt: Int
  doctorId_gte: Int
  joinCall: Int
  joinCall_not: Int
  joinCall_in: [Int!]
  joinCall_not_in: [Int!]
  joinCall_lt: Int
  joinCall_lte: Int
  joinCall_gt: Int
  joinCall_gte: Int
  patientId: Int
  patientId_not: Int
  patientId_in: [Int!]
  patientId_not_in: [Int!]
  patientId_lt: Int
  patientId_lte: Int
  patientId_gt: Int
  patientId_gte: Int
  requestDate: Int
  requestDate_not: Int
  requestDate_in: [Int!]
  requestDate_not_in: [Int!]
  requestDate_lt: Int
  requestDate_lte: Int
  requestDate_gt: Int
  requestDate_gte: Int
  videoCode: Int
  videoCode_not: Int
  videoCode_in: [Int!]
  videoCode_not_in: [Int!]
  videoCode_lt: Int
  videoCode_lte: Int
  videoCode_gt: Int
  videoCode_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VideoRequestWhereInput!]
  OR: [VideoRequestWhereInput!]
  NOT: [VideoRequestWhereInput!]
}

input VideoRequestWhereUniqueInput {
  id: Int
}

type Visitor {
  id: Int!
  country: String
  hits: Int!
  ipAddress: String!
  visitDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VisitorConnection {
  pageInfo: PageInfo!
  edges: [VisitorEdge]!
  aggregate: AggregateVisitor!
}

input VisitorCreateInput {
  id: Int
  country: String
  hits: Int!
  ipAddress: String!
  visitDate: DateTime!
}

type VisitorEdge {
  node: Visitor!
  cursor: String!
}

enum VisitorOrderByInput {
  id_ASC
  id_DESC
  country_ASC
  country_DESC
  hits_ASC
  hits_DESC
  ipAddress_ASC
  ipAddress_DESC
  visitDate_ASC
  visitDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VisitorPreviousValues {
  id: Int!
  country: String
  hits: Int!
  ipAddress: String!
  visitDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VisitorSubscriptionPayload {
  mutation: MutationType!
  node: Visitor
  updatedFields: [String!]
  previousValues: VisitorPreviousValues
}

input VisitorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VisitorWhereInput
  AND: [VisitorSubscriptionWhereInput!]
  OR: [VisitorSubscriptionWhereInput!]
  NOT: [VisitorSubscriptionWhereInput!]
}

input VisitorUpdateInput {
  country: String
  hits: Int
  ipAddress: String
  visitDate: DateTime
}

input VisitorUpdateManyMutationInput {
  country: String
  hits: Int
  ipAddress: String
  visitDate: DateTime
}

input VisitorWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  hits: Int
  hits_not: Int
  hits_in: [Int!]
  hits_not_in: [Int!]
  hits_lt: Int
  hits_lte: Int
  hits_gt: Int
  hits_gte: Int
  ipAddress: String
  ipAddress_not: String
  ipAddress_in: [String!]
  ipAddress_not_in: [String!]
  ipAddress_lt: String
  ipAddress_lte: String
  ipAddress_gt: String
  ipAddress_gte: String
  ipAddress_contains: String
  ipAddress_not_contains: String
  ipAddress_starts_with: String
  ipAddress_not_starts_with: String
  ipAddress_ends_with: String
  ipAddress_not_ends_with: String
  visitDate: DateTime
  visitDate_not: DateTime
  visitDate_in: [DateTime!]
  visitDate_not_in: [DateTime!]
  visitDate_lt: DateTime
  visitDate_lte: DateTime
  visitDate_gt: DateTime
  visitDate_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VisitorWhereInput!]
  OR: [VisitorWhereInput!]
  NOT: [VisitorWhereInput!]
}

input VisitorWhereUniqueInput {
  id: Int
}
`